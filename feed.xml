<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <generator uri="http://jekyllrb.com" version="3.7.0">Jekyll</generator>
  
  <link href="https://trueskawka.github.io/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://trueskawka.github.io/" rel="alternate" type="text/html" hreflang="en" />
  
  <updated>2018-06-30T10:12:22-07:00</updated>
  
    <id>https://trueskawka.github.io/</id>
  

  
    <title type="html">Alicja Raszkowska</title>
  

  
    <subtitle>Alicja's website and blog.
</subtitle>
  

  

  
    
      
        
          
        
          
            <entry>
              <title type="html">Improving my English</title>

              
                <link href="https://trueskawka.github.io/blog/2018/06/29/Improving-my-English.html" rel="alternate" type="text/html" title="Improving my English" />
                <published>2018-06-29T22:30:00-07:00</published>
                <updated>2018-06-29T22:30:00-07:00</updated>
                <id>https://trueskawka.github.io/blog/2018/06/29/Improving-my-English</id>
                <content type="html" xml:base="https://trueskawka.github.io/blog/2018/06/29/Improving-my-English.html">&lt;p&gt;I encountered a thread in a community group chat asking for advice on guiding someone through improving English skills. Some of the resources and ideas I shared were helpful, so I decided to write a longer blog post about it.&lt;/p&gt;

&lt;p&gt;First, a few disclaimers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I didn’t self-learn English - I had about 15 years of mandatory school courses and a fair share of instruction outside of the classroom&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I had a heavy Polish accent until the second year of my undergrad, which disappeared by getting more comfortable with the language&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I went to an English-speaking country for the first time when I was 25, so all my training was in Poland&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are some ideas that worked for me in the hope that they could be a good starting point for others to inspire their own explorations. Learning a language is like acquiring any other skill, it requires commitment and deliberate practice, with a lot of fun along the way.&lt;/p&gt;

&lt;h3 id=&quot;setting-goals&quot;&gt;Setting goals&lt;/h3&gt;
&lt;p&gt;It gets harder to set a goal the more comfortable one is with the language. Initially, my goal was to get good grades in school. Then I wanted to learn better English so I could read faster, because I had to sometimes rewatch parts of the subtitled movies.&lt;/p&gt;

&lt;p&gt;Somebody spoiled the ending of the last Harry Potter book for me, because I was struggling through it for more than a week. Somebody else got praise for their beautiful accent and I was embarrassed about my hard Polish vowels. My Guild Wars team needed a translator for international runs. I wanted to go to New York for a few months to join a community of programmers.&lt;/p&gt;

&lt;p&gt;My goals inflated as my confidence grew and I still see many ways I could improve: writing more American English, so my sentences are not Polish-long; flattening my too posh accent so people don’t think I’m trying to sound this way; using tenses and conditionals the way a native speaker would.&lt;/p&gt;

&lt;p&gt;No matter where you are on your journey, try to set a goal that’s slightly outside of your reach and will motivate you to improve.&lt;/p&gt;

&lt;h3 id=&quot;switching-to-english&quot;&gt;Switching to English&lt;/h3&gt;
&lt;p&gt;English classes were useful for learning the basics and making it a habit through homework and tests. What helped me get from being able to use the language to thinking in it was what I would do outside of the classroom.&lt;/p&gt;

&lt;p&gt;I made sure to be surrounded by English through:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;switching all my devices to English, especially since the Polish translations were often awkward&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;making sure to watch, read and listen only in English - binge watching “Grey’s Anatomy”, “Bones” and “Supernatural” helped, especially with English subtitles on and watching closely how people move their mouths when they speak, trying to mimic it&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;having conversations with myself - one of my friends phrased it better as having “mini presentations”, I’d sit in front of a mirror and answer questions in imaginary conversations out loud, talking about anything of interest (especially being one of the protagonists in a TV series I was hooked on)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;memorizing standard sentences and learning how to replace certain words (a bit like Duolingo) - “I am eating cake” can easily become “I am eating pancakes”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;learning about Polish grammar through English and Arabic studies - learning about the grammar of your own language or another language you know well helps with understanding grammar in general&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;writing more, even if I never posted it - especially short stories and programming tutorials, which require good structure and flow&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;interviewing people - talking to people on a daily basis while living in Poland, writing notes for the interviews and often rewatching parts of the recordings (which is super uncomfortable, but helpful)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;moving to an English speaking country - I notice my brain being in English-mode more than half the time, even when I’m alone&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;noticing-patterns&quot;&gt;Noticing patterns&lt;/h3&gt;
&lt;p&gt;English is notoriously irregular and hard to grasp. The pronunciation rules are often misleading, words have more synonyms than one could imagine and one can use it in a way that’s very hard to understand. (like this &lt;a href=&quot;http://www.cleo.com.sg/entertain-me/try-english-test-question-korean-students-have-answer/&quot;&gt;nightmare of a language test&lt;/a&gt; from South Korea)&lt;/p&gt;

&lt;p&gt;When I encounter something new, I try to think of a pattern that can be a more general rule:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;I noticed I’m using tenses differently than a native speaker would - one of my friends made me more mindful of the fact I use present perfect (have + past verb) more often; it was a revelation to me that the &lt;code class=&quot;highlighter-rouge&quot;&gt;-ing&lt;/code&gt; continuous tense is more natural for native speakers than the present simple form&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I realized at some point that in English you want to have something in front of your noun 99% of the time, be it a particle or an article, which is not something we even have a notion of in Polish&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;my pronunciation improved when I started noting down words someone would be confused about, e.g. I often pronounce &lt;code class=&quot;highlighter-rouge&quot;&gt;spent&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;spend&lt;/code&gt; the same way, because in Polish we de-vocalize the last consonant and I was unknowingly doing it in other languages&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Language learning is full of little “a-ha” moments and constant improvement. Looking for explanations and being more mindful of underlying patterns can help you get more comfortable.&lt;/p&gt;

&lt;h3 id=&quot;asking-for-feedback&quot;&gt;Asking for feedback&lt;/h3&gt;
&lt;p&gt;It is hard and can initially be embarrassing to ask for feedback, especially if you’re surrounded by people who are more comfortable with English.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Ask someone you’d be comfortable getting feedback from&lt;/p&gt;

    &lt;p&gt;While still in school, your teacher is probably the best person to ask. It becomes tricky when you don’t have an instructor and have to ask your friends or coworkers to help you out. Make sure you’d be comfortable with them talking about your mistakes.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Understand what kind of feedback you need&lt;/p&gt;

    &lt;p&gt;Before I took my IELTS last year, I’d never think I needed to work on my speaking skills, but when I got a lower than expected score, I realized I was overconfident. Assess your skills as objectively as you can and think about which areas you’d need most help with. A good rule of thumb is looking for something you’re uncomfortable with. If you don’t like writing, maybe it’s time to start a blog and encourage yourself to write more.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Set ground rules&lt;/p&gt;

    &lt;p&gt;Helpful feedback is specific and focused on the issue - your English. Your friend might be a native speaker, a language teacher or just more comfortable with the language. For some reason they know something you don’t and you have a chance to learn from them. That’s great! Making mistakes is how you learn.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some ideas that worked for me:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;feedback is given in a way that’s not interrupting the flow of the conversation - otherwise it can make you feel uncomfortable&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;it should be focused on one aspect at a time - usually something that stands out the most, making the meaning unclear or inappropriate, e.g. don’t correct me on my particles if the tense I’m using makes everything confusing&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the person giving feedback is open to explaining the issue in more detail - it’s not helpful to say “this is not right, you should say something different”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example of good feedback&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;a friend, after I finished what I wanted to say&lt;/em&gt;: “By the way, you said you’d like feedback on your English. I noticed you are saying &lt;code class=&quot;highlighter-rouge&quot;&gt;polish&lt;/code&gt; when you mean &lt;code class=&quot;highlighter-rouge&quot;&gt;Polish&lt;/code&gt;. They sound nearly the same, but the difference is in the vowel - one is a long vowel.”&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;me, intrigued&lt;/em&gt;: “What’s this long vowel thing you are talking about? I have never heard about it!”&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;followed by a nice conversation about vowels in English&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What was good about it:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;they stated they’re giving me feedback I requested before to set up the context&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;they gave a specific example of what I was saying&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;they explained the more general context of the error&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;they were open to having a conversation afterwards, during which I learned more about the general rules and how native speakers perceive vowels in English&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Example of bad feedback&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;during a longer conversation about buying books for learning Arabic&lt;/em&gt;&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;a classmate&lt;/em&gt;: “Well, I would never pronounce it &lt;code class=&quot;highlighter-rouge&quot;&gt;[ah-ray-bick]&lt;/code&gt;.”&lt;/p&gt;

  &lt;p&gt;&lt;em&gt;me, after an awkward silence&lt;/em&gt;: “Uhm.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What was bad about it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;they were only pointing out the mistake, not giving the wider context&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;they focused on setting themselves up as more knowledgeable&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;they made me uncomfortable, because it was meant to be a joke on my behalf&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;life-long-learning&quot;&gt;Life-long learning&lt;/h3&gt;
&lt;p&gt;Learning a language is hard at first, but as I got more comfortable, it became more natural and pleasurable. It’s not only useful, especially when you need it in a professional context, but also fun!&lt;/p&gt;

&lt;p&gt;If you ever get discouraged, keep in mind that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;native speakers have the advantage of being surrounded by the language and thinking in it all the time - how comfortable are you in your mother language?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;native speakers make mistakes - they omit particles, they use the wrong tense, they misremember a phrasal verb; I don’t know how many times I said &lt;code class=&quot;highlighter-rouge&quot;&gt;wziąść&lt;/code&gt; in Polish even though the appropriate form is &lt;code class=&quot;highlighter-rouge&quot;&gt;wziąć&lt;/code&gt; and I have been corrected on it countless times&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the fact that you have a foreign accent and sometimes make mistakes means you are learning - and that’s amazing!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;p&gt;Most of the resources I use are in English, be it programming language documentation or news sites. There are a few I tend to use more often, but this is a subjective mix of links that I enjoy that might be useful.&lt;/p&gt;

&lt;p&gt;Reading blogs and watching vlogs about English is fun and helpful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.quickanddirtytips.com/grammar-girl&quot;&gt;Grammar Girl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.merriam-webster.com/video&quot;&gt;Merriam-Webster vlog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://grammarist.com/&quot;&gt;Grammarist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.engvid.com/&quot;&gt;engVid&lt;/a&gt; (Jade has the best lessons!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;General tools for longer reads:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://readlang.com/&quot;&gt;Readlang&lt;/a&gt; is a browser extension you can use for websites that helps you look up words quickly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://getpocket.com/a/&quot;&gt;Pocket&lt;/a&gt; for saving longer articles&lt;/li&gt;
  &lt;li&gt;using a tablet/ebook reader to read ebooks, especially using the built-in dictionaries to not interrupt your reading (try to understand the context of the word before you look it up)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Writing tools:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hemingwayapp.com/&quot;&gt;Hemingway&lt;/a&gt; a writing app, it’s hard to adjust not only your understanding of the grammar, but also your style to English, e.g. shorter sentences, more repetitiveness, simpler structures&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.grammarly.com/&quot;&gt;Grammarly&lt;/a&gt; for checking your grammar on the fly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Podcasts (any podcasting app will do):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npr.org/podcasts/510307/invisibilia&quot;&gt;Invisibilia&lt;/a&gt; - talking about invisible things around us and science&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.wnyc.org/shows/notetoself&quot;&gt;Note to Self&lt;/a&gt; - a podcast about our relationship with technology&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://rationallyspeakingpodcast.org/&quot;&gt;Rationally Speaking&lt;/a&gt; - rationality and skepticism&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scienceforthepeople.ca/&quot;&gt;Science For The People&lt;/a&gt; - various science&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npr.org/podcasts/510308/hidden-brain&quot;&gt;Hidden Brain&lt;/a&gt; - mostly focused on science of human behavior&lt;/li&gt;
&lt;/ul&gt;</content>
              


              
              
              
              
              

              
                <author>
                    <name>alicja</name>
                  
                  
                </author>
              

              

              

              
                <summary type="html">I encountered a thread in a community group chat asking for advice on guiding someone through improving English skills. Some of the resources and ideas I shared were helpful, so I decided to write a longer blog post about it.</summary>
              

              
              
            </entry>
          
        
      
    
  
    
      
        
          
        
          
            <entry>
              <title type="html">GDPR compliance</title>

              
                <link href="https://trueskawka.github.io/blog/2018/05/25/GDPR-compliance.html" rel="alternate" type="text/html" title="GDPR compliance" />
                <published>2018-05-25T15:30:00-07:00</published>
                <updated>2018-05-25T15:30:00-07:00</updated>
                <id>https://trueskawka.github.io/blog/2018/05/25/GDPR-compliance</id>
                <content type="html" xml:base="https://trueskawka.github.io/blog/2018/05/25/GDPR-compliance.html">&lt;p&gt;As the &lt;a href=&quot;https://en.wikipedia.org/wiki/General_Data_Protection_Regulation&quot;&gt;General Data Protection Regulation&lt;/a&gt; compliance deadline has 
arrived today, I have removed all tracking scripts from my website.&lt;/p&gt;

&lt;p&gt;I did it to protect myself, as being self-employed implies I’m a legal entity. I never collected any data
beyond user visits, be it personal information or passwords.&lt;/p&gt;

&lt;p&gt;I have only used two tracking scripts, both external:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Google Analytics for getting info on the website traffic - removed completely&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Recurse Center script for referrals - I removed the script and now only use a static link for referrals 
(even the RC logo animation is in pure CSS)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since this website is being hosted on &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub pages&lt;/a&gt;, some data is still
being tracked by GitHub servers for providing the service. I don’t have control over what GitHub might 
be tracking, but I don’t provide any additional data to them. Any data GitHub might have on users 
after visiting this website is what they willfully provide by browsing the Internet.&lt;/p&gt;

&lt;p&gt;I might add a new tracking script to this website in the future, after I make sure I understand if and how 
Google Analytics is compliant with GDPR.&lt;/p&gt;</content>
              


              
              
              
              
              

              
                <author>
                    <name>alicja</name>
                  
                  
                </author>
              

              

              

              
                <summary type="html">As the General Data Protection Regulation compliance deadline has arrived today, I have removed all tracking scripts from my website.</summary>
              

              
              
            </entry>
          
        
      
    
  
    
      
        
          
        
          
            <entry>
              <title type="html">Conf &amp;amp; Coffee 2018 - designing and printing name badges</title>

              
                <link href="https://trueskawka.github.io/blog/2018/04/22/designing-conference-badges.html" rel="alternate" type="text/html" title="Conf &amp; Coffee 2018 - designing and printing name badges" />
                <published>2018-04-22T16:13:00-07:00</published>
                <updated>2018-04-22T16:13:00-07:00</updated>
                <id>https://trueskawka.github.io/blog/2018/04/22/designing-conference-badges</id>
                <content type="html" xml:base="https://trueskawka.github.io/blog/2018/04/22/designing-conference-badges.html">&lt;p&gt;We recently organized &lt;a href=&quot;https://www.meetup.com/codecoffeeyvr/events/249207842/&quot;&gt;Conf &amp;amp; Coffee 2018&lt;/a&gt; in Vancouver, BC,
and one of the bigger tasks we had to take care of was designing and printing our conference badges. A conference is 
all about people - people who come there to learn, meet new people and have a good time. We wanted
to make it easier for them and create useable badges.&lt;/p&gt;

&lt;p&gt;Name badges are often bulky and awkward, but they serve a purpose. A well-designed badge can help start a conversation -
and get back to it, even if you suddenly forget someone’s name. We also wanted the attendees to be able to easily find speakers 
and organizers in the crowd. It also helped with initial registration, giving people a reason to come to the registration 
desk and chat with us.&lt;/p&gt;

&lt;p&gt;We had a few requirements in mind before printing the badges:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;making sure the name is clearly visible and readable at a distance&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;making the prints sturdy enough to be usable for a 2-day conference&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;color-coding them for easy recognition of attendees, speakers and organizers&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;having an adjustable lanyard, so that people of all heights can feel comfortable wearing them&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;encouraging everyone to use their badges as they please - add interests, stickers, preferred pronouns etc.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;design-and-prints&quot;&gt;Design and prints&lt;/h3&gt;

&lt;p&gt;We had a wonderful initial design for the badge created by &lt;a href=&quot;https://alannamunro.com/&quot;&gt;Alanna Munro&lt;/a&gt; and worked from 
there by creating two more color options - we ended up using the original purple color scheme for speakers, adding a 
peach color for attendees and a green one for organizers.&lt;/p&gt;

&lt;image src=&quot;/images/badges/colors.png&quot; style=&quot;width: 100%&quot; /&gt;

&lt;p&gt;We then took the SVG files and prepared them for printing, working closely with a wonderful local print shop. They 
helped us with:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;creating an image in &lt;a href=&quot;https://www.adobe.com/products/illustrator.html&quot;&gt;Adobe Illustrator&lt;/a&gt; - the original design by Alanna was 
created in Illustrator, but since the person mostly working with the designs had more experince with 
&lt;a href=&quot;https://www.sketchapp.com/&quot;&gt;Sketch&lt;/a&gt;, we decided to use it for brainstorming&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;adding bleed - we had a sense that we’re going to need bleed, but initially added it in the SVG projects rather than
using the Illustrator tooling for adding it, it turns out it takes about 20 seconds to add if you know how&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;making sure everything aligns just right, especially the names and the speaker talk information - a few people had longer
names and non-English characters in them, some of our speakers had two talks during the conference&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;adjusting the colors for printing - we had a color palette defined in HEX that looked great on a screen, but needed a splash
of cyan to make it more vivid in print&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;choosing the right paper - uncoated heavy white cardstock (130lb), as we wanted people to write on them&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;cutting the prints and drilling holes - it might seem obvious, but we were initially a bit worried we might need to cut and
drill the holes on our own, turns out it’s something a print shop will gladly do&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We got the initial prints and stress-tested them throroughly - writing on them, putting them under pouring water, pulling at
the lanyard etc. - and they were perfect for our needs. We were very lucky with the print shop service, as they were
responsive and quick to adjust the order to our needs.&lt;/p&gt;

&lt;h3 id=&quot;lanyards&quot;&gt;Lanyards&lt;/h3&gt;

&lt;p&gt;We decided to use twine for our adjustable lanyards. Initially, we wanted to use regular packaging twine, but it was too brittle,
so we used white cotton twine instead - one spool was enough for all our badges.&lt;/p&gt;

&lt;p&gt;To attach the lanyards we needed:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;big enough holes in badges on each side (0.125in) - this also allowed the badges to not turn too much, if properly adjusted&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;two pieces of twine (one for each side)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a sliding knot to connect the two pieces - we used a &lt;a href=&quot;http://www.animatedknots.com/doublefishermans/index.php&quot;&gt;fisherman’s knot&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It sounds simple, but keep in mind we had about 130 badges with pre-printed names and a bunch of blanks in case of last-minute 
cancellations/swaps. It took two people and two episodes of Westworld - I don’t think you could do it with one person and four 
episodes, because without my partner helping me I’d probably call all the other organizers for an emergency twine party.&lt;/p&gt;

&lt;h3 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Design - it’s not easy&lt;/p&gt;

    &lt;p&gt;If you are not a designer, don’t assume you can make the badges look good on your own. Our badges looked great, but most of it
 was thanks to a simple and adjustable design that we could then reuse. The back side of the badges had a simple table for 
 names and Twitter handles, because we didn’t have a clue as to what else we could put there that would look good and be usable
 (or, at least, not look terribly out of place). Make sure to work with a designer.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Timing the prints - you need last-minute adjustments&lt;/p&gt;

    &lt;p&gt;We decided to print the badges after finalizing the ticket sales, but we didn’t expect too many swaps. 
 That turned out to be an overly optimistic assumption, as many people suddenly remembered about the conference a few days
 before it and were asking about last minute changes. We ended up ordering additional blank badges, so that people could write
 their own names on them.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Informing attendees at registration - especially on adjustable lanyards&lt;/p&gt;

    &lt;p&gt;Yes, we had the adjustable lanyards - but we didn’t do a great job explaining it at the registration desk and some of our 
 attendees were initially very uncomfortable. We could also encourage people more to draw on them and use them, as, even though
 we had a prop just for that, not many people felt encouraged to do so. The back of the badge with a table to put names and 
 Twitter handles in was not used by most of the attendees, so maybe we could figure out a way to better use it in the future.&lt;/p&gt;

    &lt;image src=&quot;/images/badges/prop.jpg&quot; style=&quot;width: 80%&quot; /&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Adjustable lanyards are appreciated - but we could improve the process of attaching them&lt;/p&gt;

    &lt;p&gt;We heard positive feedback about the lanyards, especially from attendees that usually have some issues with awkward placement
 of conference badges, which was great and we’ll definitely make them again. One thing we could improve is making sure more people
 could attach them and the process is less time-consuming.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Conference logo - you ain’t gonna need it&lt;/p&gt;

    &lt;p&gt;We didn’t use the conference logo on the badges, as our design looked great without it. Our attendees knew what conference
 they are attending and we couldn’t think of a way of putting our logo on the badge without overshadowing the more important bids.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;all-about-the-people&quot;&gt;All about the people&lt;/h3&gt;

&lt;p&gt;A conference takes a lot of work and, although most of the tasks are simple and repeatable, it gets surprisingly hard and tiresome. 
It was a great experience, especially since I got to work with a wonderful group of people.&lt;/p&gt;

&lt;p&gt;Thank you Brooke, Rose, Manil, Darryl, Nichole and Steve for welcoming me as a co-organizer!&lt;/p&gt;

&lt;p&gt;Thank you Gavin, Paulina, Robert, Wendy, Andrea, Bernadette, Stephen and Daruvin for volunteering and making this conference happen!&lt;/p&gt;

&lt;image src=&quot;/images/badges/badge.jpg&quot; style=&quot;width: 100%&quot; /&gt;</content>
              


              
              
              
              
              

              
                <author>
                    <name>alicja</name>
                  
                  
                </author>
              

              

              

              
                <summary type="html">We recently organized Conf &amp;amp; Coffee 2018 in Vancouver, BC, and one of the bigger tasks we had to take care of was designing and printing our conference badges. A conference is all about people - people who come there to learn, meet new people and have a good time. We wanted to make it easier for them and create useable badges.</summary>
              

              
              
            </entry>
          
        
      
    
  
    
      
        
          
        
          
        
      
    
  
    
      
        
          
        
          
            <entry>
              <title type="html">Drawing with CSS - part 2: linear gradients</title>

              
                <link href="https://trueskawka.github.io/blog/programming/2018/04/01/drawing-with-CSS-part-2-linear-gradients.html" rel="alternate" type="text/html" title="Drawing with CSS - part 2: linear gradients" />
                <published>2018-04-01T16:55:00-07:00</published>
                <updated>2018-04-01T16:55:00-07:00</updated>
                <id>https://trueskawka.github.io/blog/programming/2018/04/01/drawing-with-CSS-part-2-linear-gradients</id>
                <content type="html" xml:base="https://trueskawka.github.io/blog/programming/2018/04/01/drawing-with-CSS-part-2-linear-gradients.html">&lt;p&gt;The first part of the drawing with CSS tutorial was all about 
&lt;a href=&quot;/blog/programming/2018/02/07/drawing-with-CSS-part-1-box-shadows.html&quot;&gt;box shadows&lt;/a&gt;.
They are pretty flexible when it comes to creating multiple rectangular and circular shapes, but there are some
limitations.&lt;/p&gt;

&lt;p&gt;Three main disadvantages of using only box shadows for drawing:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;their rotation is the same as the rotation of the parent element&lt;/li&gt;
  &lt;li&gt;their size is defined relative to the parent element&lt;/li&gt;
  &lt;li&gt;there is a limit of three base shapes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this blog post I want to focus on another tool for drawing with CSS - gradients. Gradients are images created with a 
function. In their most basic form, they are a progressive transition between two colors. Let’s take an initial look as 
to what that means, starting with a simple black square.&lt;/p&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/linear-gradients.css&quot; /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.boxy {
  height: 100px;
  width: 100px;
  
  background: black;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;boxy&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can add different transitions using a simple linear gradient:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* From top to bottom */
.boxy {
  height: 100px;
  width: 100px;

  background: linear-gradient(to bottom, black, white);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;boxy boxy-gradient-bottom&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* From bottom to top */
.boxy {
  height: 100px;
  width: 100px;
  
  background: linear-gradient(to top, black, white);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;boxy boxy-gradient-top&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* From left to right */
.boxy {
  height: 100px;
  width: 100px;
  
  background: linear-gradient(to right, black, white);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;boxy boxy-gradient-right&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* From right to left */
.boxy {
  height: 100px;
  width: 100px;
  
  background: linear-gradient(to left, black, white);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;boxy boxy-gradient-left&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So how are gradients defined? Because they are images created with a function, they are applied to 
the &lt;code class=&quot;highlighter-rouge&quot;&gt;background&lt;/code&gt; property, more specifically &lt;code class=&quot;highlighter-rouge&quot;&gt;background-image&lt;/code&gt;. Before we go any further, let’s take a closer 
look at the some of the &lt;code class=&quot;highlighter-rouge&quot;&gt;background&lt;/code&gt; properties:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;background-color&lt;/code&gt; (keyword/RGB/HSL) - sets the background color of an element&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;background-image&lt;/code&gt; - sets one or more background images for an element, including 
gradients&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;background-position&lt;/code&gt; (keyword/px/em/percentage) - sets the position of the background&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;background-repeat&lt;/code&gt; (keyword) - defines how background images are repeated&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;background-size&lt;/code&gt; (keyword/px/em/percentage) - specifies the size of a background element&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;background-attachment&lt;/code&gt; (keyword) - defines the scrolling beahviour&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Most of the time there is no need to set all of those properties at once and it’s possible to
use a &lt;code class=&quot;highlighter-rouge&quot;&gt;background&lt;/code&gt; shorthand to concisely define only those that are needed. All the other properties
will be set to their initial values.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;background&lt;/code&gt; shorthand is defined as:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;background: &amp;lt;attachment&amp;gt; &amp;lt;image&amp;gt; &amp;lt;position&amp;gt; &amp;lt;size&amp;gt; &amp;lt;repeat&amp;gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and it can have multiple layers. The layers are positioned as a stack from the bottom-most declaration - the 
lowest layer is going to be at the bottom of the stack and the subsequent layers are going to cover
it - which we can use for multi-layer drawings!&lt;/p&gt;

&lt;p&gt;Linear gradients are defined with the &lt;code class=&quot;highlighter-rouge&quot;&gt;linear-gradient()&lt;/code&gt; function that we can use in the &lt;code class=&quot;highlighter-rouge&quot;&gt;background-image&lt;/code&gt;
property. Let’s dive into the properties of that function:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;side-or-corner&amp;gt;&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;angle&amp;gt;&lt;/code&gt; - the first property of a linear gradient defines where the transition 
  between colors starts and ends, which can be defined either by keywords (&lt;code class=&quot;highlighter-rouge&quot;&gt;to bottom&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;to right&lt;/code&gt;) or angles
  (&lt;code class=&quot;highlighter-rouge&quot;&gt;180deg&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;90deg&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;two or more &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;color-stop&amp;gt;&lt;/code&gt; values - each has a color value (keyword/RGB/HSL) followed by an optional &lt;code class=&quot;highlighter-rouge&quot;&gt;stop&lt;/code&gt; 
position (percentage/px/em), they define what colors and at what points are transitioning&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The description on its own might not be entirely clear, so let’s look at some examples. To better understand 
the angle of a linear gradient, you can play with the fiddle below - it’s a linear gradient transitioning 
between three colors: red, pink and orange (the middle pink color is used to visualize the gradient line better).&lt;/p&gt;

&lt;div id=&quot;gradient-container&quot;&gt;
  &lt;div id=&quot;gradient-box&quot;&gt;
    &lt;div id=&quot;js-gradient&quot;&gt;
      &lt;div id=&quot;perpendicular-line&quot;&gt;&lt;/div&gt;
      &lt;div id=&quot;gradient-line&quot;&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;angle-form&quot;&gt;
    &lt;h4&gt;Angle &lt;span id=&quot;ang&quot;&gt;45&lt;/span&gt;&amp;deg;&lt;/h4&gt;
    &lt;input name=&quot;angle&quot; type=&quot;range&quot; min=&quot;0&quot; max=&quot;360&quot; value=&quot;45&quot; step=&quot;1&quot; id=&quot;angle&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This gradient is defined as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;linear-gradient(
  &amp;lt;angle&amp;gt; deg,
  red 0%,
  #ff9a9e 50%, #ff9a9e 50%,
  orange 100%
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;angle&amp;gt;&lt;/code&gt; value is taken directly from the value in the fiddle.&lt;/li&gt;
  &lt;li&gt;The first color-stop declaration &lt;code class=&quot;highlighter-rouge&quot;&gt;red 0%&lt;/code&gt; means that color &lt;code class=&quot;highlighter-rouge&quot;&gt;red&lt;/code&gt; is the first color and it starts at the 
  very beginning of the gradient line at &lt;code class=&quot;highlighter-rouge&quot;&gt;0%&lt;/code&gt;. Technically, the &lt;code class=&quot;highlighter-rouge&quot;&gt;0%&lt;/code&gt; here is superfluous, as it’s the initial 
  value for the first color-stop.&lt;/li&gt;
  &lt;li&gt;The second and third color-stop declarations define the pink strip - it starts and stops at &lt;code class=&quot;highlighter-rouge&quot;&gt;50%&lt;/code&gt;. The first 
  color-stop is linearly transitioning from being pure &lt;code class=&quot;highlighter-rouge&quot;&gt;red&lt;/code&gt; to being more and more &lt;code class=&quot;highlighter-rouge&quot;&gt;#ff9a9e&lt;/code&gt;. Then the third
  color-stop is linearly transitioning from being pure &lt;code class=&quot;highlighter-rouge&quot;&gt;#ff9a9e&lt;/code&gt; to being more and more &lt;code class=&quot;highlighter-rouge&quot;&gt;orange&lt;/code&gt; - the last color
  stop.&lt;/li&gt;
  &lt;li&gt;The last color-stop declaration defines the orange part of the gradient - it goes from where the last color-stop
  ends at &lt;code class=&quot;highlighter-rouge&quot;&gt;50%&lt;/code&gt; to the end of the gradient line at &lt;code class=&quot;highlighter-rouge&quot;&gt;100%&lt;/code&gt;. Technically &lt;code class=&quot;highlighter-rouge&quot;&gt;100%&lt;/code&gt; here is superfluous, as it’s the initial
  value for the last color-stop.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A few things worth mentioning at this point:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;CSS gradients have no intrinsic dimensions - they define a color progression within the element they are applied to 
and don’t have a preferred size nor a preferred ratio. They repeat so as to fill the container. You can imagine them
as stripes of color progressively transitioning from the first color to the last, placed along the gradient line.&lt;/li&gt;
  &lt;li&gt;CSS function calculates the color values in a way that makes the corners the full defined color - the starting points 
start at a perpendicular line between the corner and the gradient line - I found the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient#Composition_of_a_linear_gradient&quot;&gt;MDN visualization&lt;/a&gt;
useful for understanding how it works.&lt;/li&gt;
  &lt;li&gt;Color-stops can have values below &lt;code class=&quot;highlighter-rouge&quot;&gt;0%&lt;/code&gt; and above &lt;code class=&quot;highlighter-rouge&quot;&gt;100%&lt;/code&gt; - since linear gradients don’t have an intrinsic size and are 
defined along a gradient line, the stop values can be placed at any point along this line.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By now you probably understand pretty well how to use gradients as backgrounds, but how can they be used for drawing? 
Let’s gather some useful insights here:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;an element can have multiple background images that can be layered on top of each other&lt;/li&gt;
  &lt;li&gt;each background image can have a precisely defined size (its bounding box) and position for the upper left corner&lt;/li&gt;
  &lt;li&gt;linear gradients can be defined with either percentages or pixels and can be used as background images&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Before we get started with drawing, let’s explore the last point a bit more - a linear gradient can be defined using 
either percentages or lenghts.&lt;/p&gt;

&lt;p&gt;The first gradient below is defined using percentages and the second one is using pixels. Initially, the angle is &lt;code class=&quot;highlighter-rouge&quot;&gt;0deg&lt;/code&gt;
and they both look the same. But changing the angle is going to either change the width of the line (percentage gradient)
or the position (pixel gradient). Depending on which variable we want to control, it’s sensible to use an appropriate 
approach for linear gradients.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/* Percentages */
linear-gradient(
  &amp;lt;angle&amp;gt; deg,
  white 0%, white 40%,
  orange 40%, orange 60%,
  white 60%, white 100%
);

/* Pixels */
linear-gradient(
  &amp;lt;angle&amp;gt; deg,
  white 0%, white 80px,
  orange 80px, orange 120px,
  white 120px, white 100%
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;gradient-container2&quot;&gt;
  &lt;div class=&quot;gradient&quot; id=&quot;percentage-gradient&quot;&gt;&lt;/div&gt;
  &lt;div class=&quot;gradient&quot; id=&quot;pixel-gradient&quot;&gt;&lt;/div&gt;
  &lt;div id=&quot;angle-form2&quot;&gt;
    &lt;h4&gt;Angle &lt;span id=&quot;ang2&quot;&gt;0&lt;/span&gt;&amp;deg;&lt;/h4&gt;
    &lt;input name=&quot;angle2&quot; type=&quot;range&quot; min=&quot;0&quot; max=&quot;360&quot; id=&quot;angle2&quot; value=&quot;0&quot; /&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Now we have all the tools to draw something using linear gradients. Let’s work through an example, recreating the
&lt;a href=&quot;https://www.haskell.org/&quot;&gt;Haskell&lt;/a&gt; logo. It consists of a few simple linear elements and we’re going to start from
the lower right part of the lambda as the base element. If you look at the image closely, you can see that the same
element is repeated throughout the lambda and the preceeding chevron, simply mirrored at different angles.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.haskell {
  width: 156px;
  height: 144px;
  
  color: orange;
  
  background:
    linear-gradient(
      237.5deg,
      transparent 77px,
      currentColor 77px,
      currentColor 129px,
      white 129px
    );
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container-haskell&quot;&gt;&lt;div class=&quot;haskell-lower-right&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next let’s mirror the lower right part to create the bottom part of the lambda. We need more fine-grained 
control for positioning the elements, so let’s set the size of each background element to &lt;code class=&quot;highlighter-rouge&quot;&gt;156&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;144&lt;/code&gt; 
pixels with &lt;code class=&quot;highlighter-rouge&quot;&gt;background-size&lt;/code&gt; and make sure the background doesn’t repeat itself. Now we’re going to use
an initial position for each background element, to make sure it’s in the right place, and double the width
of the image.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.haskell {
  width: 312px;
  height: 144px;
  
  color: orange;
  
  background:
    linear-gradient(
      122.5deg,
      transparent 80px,
      currentColor 80px,
      currentColor 132px,
      transparent 132px
    ),
    linear-gradient(
      237.5deg,
      transparent 77px,
      currentColor 77px,
      currentColor 129px,
      white 129px
    ) 156px 0;
  
  background-size: 156px 144px;
  background-repeat: no-repeat;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container-haskell&quot;&gt;&lt;div class=&quot;haskell-lower-lambda&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s add the upper part of the lambda - we need to move elements around a bit, to make sure they overlap properly.
Also, now the image needs double the single element height.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.haskell {  
  width: 312px;
  height: 288px;
  
  color: orange;
  
  background:
    linear-gradient(
      237.5deg,
      transparent 77px,
      currentColor 77px,
      currentColor 129px,
      transparent 129px
    ) 65px 0,
    linear-gradient(
      122.5deg,
      transparent 80px,
      currentColor 80px,
      currentColor 132px,
      transparent 132px
    ) 65px 144px,
    linear-gradient(
      237.5deg,
      transparent 77px,
      currentColor 77px,
      currentColor 129px,
      white 129px
    ) 156px 144px;
  
  background-size: 156px 144px;
  background-repeat: no-repeat;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container-haskell&quot;&gt;&lt;div class=&quot;haskell-lambda&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next element of the logo is a chevron on the left side of the lambda. It’s made of the same base 
elements as the lambda, just mirrored a bit. Let’s increase the size of the image, move the lambda a bit
to the right and add a black chevron.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.haskell {
  width: 345px;
  height: 288px;
  
  color: orange;
  
  background:
    /* black chevron */
    /* upper part */
    linear-gradient(
      237.5deg,
      transparent 77px,
      #101c24 77px,
      #101c24 129px,
      transparent 129px
    ) 0 0,
    /* lower part */
    linear-gradient(
      122.5deg,
      transparent 80px,
      #101c24 80px,
      #101c24 132px,
      transparent 132px
    ) 0 144px,

    /* lambda */
    /* upper part */
    linear-gradient(
      237.5deg,
      transparent 77px,
      currentColor 77px,
      currentColor 129px,
      transparent 129px
    ) 85px 0,
    /* lower left part */
    linear-gradient(
      122.5deg,
      transparent 80px,
      currentColor 80px,
      currentColor 132px,
      transparent 132px
    ) 85px 144px,
    /* lower right part */
    linear-gradient(
      237.5deg,
      transparent 77px,
      currentColor 77px,
      currentColor 129px,
      white 129px
    ) 176px 144px;
  
  background-size: 156px 144px;
  background-repeat: no-repeat;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container-haskell&quot;&gt;&lt;div class=&quot;haskell-chevron&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last part of the image are two parallel lines on the right. We need to add a bit of space to
fit the lines to the right and add two linear gradients with either &lt;code class=&quot;highlighter-rouge&quot;&gt;0deg&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;180deg&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.haskell {
  width: 380px;
  height: 288px;
  
  color: orange;
  
  background:
    /* black chevron */
    /* upper part */
    linear-gradient(
      237.5deg,
      transparent 77px,
      #101c24 77px,
      #101c24 129px,
      transparent 129px
    ) 0 0,
    /* lower part */
    linear-gradient(
      122.5deg,
      transparent 80px,
      #101c24 80px,
      #101c24 132px,
      transparent 132px
    ) 0 144px,

    /* lambda */
    /* upper part */
    linear-gradient(
      237.5deg,
      transparent 77px,
      currentColor 77px,
      currentColor 129px,
      transparent 129px
    ) 85px 0,
    /* lower left part */
    linear-gradient(
      122.5deg,
      transparent 80px,
      currentColor 80px,
      currentColor 132px,
      transparent 132px
    ) 85px 144px,
    /* lower right part */
    linear-gradient(
      237.5deg,
      transparent 77px,
      currentColor 77px,
      currentColor 129px,
      white 129px
    ) 176px 144px,
    
    /* black lines */
    /* upper line */
    linear-gradient(
      180deg,
      white 80px,
      #101c24 80px,
      #101c24 132px,
      white 132px
    ) 220px 0px,
    /* lower line */
    linear-gradient(
      180deg,
      white 12px,
      #101c24 12px,
      #101c24 64px,
      white 64px
    ) 220px 144px;
  
  background-size: 156px 144px;
  background-repeat: no-repeat;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container-haskell&quot;&gt;&lt;div class=&quot;haskell-with-lines&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now it’s almost done - we just need to add two more white base elements between the orange lambda
and the black lines to visually separate them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.haskell {
  width: 380px;
  height: 288px;
  
  color: orange;
  
  background:
    /* black chevron */
    /* upper part */
    linear-gradient(
      237.5deg,
      transparent 77px,
      #101c24 77px,
      #101c24 129px,
      transparent 129px
    ) 0 0,
    /* lower part */
    linear-gradient(
      122.5deg,
      transparent 80px,
      #101c24 80px,
      #101c24 132px,
      transparent 132px
    ) 0 144px,

    /* lambda */
    /* upper part */
    linear-gradient(
      237.5deg,
      transparent 77px,
      currentColor 77px,
      currentColor 129px,
      transparent 129px
    ) 85px 0,
    /* lower left part */
    linear-gradient(
      122.5deg,
      transparent 80px,
      currentColor 80px,
      currentColor 132px,
      transparent 132px
    ) 85px 144px,
    /* lower right part */
    linear-gradient(
      237.5deg,
      transparent 77px,
      currentColor 77px,
      currentColor 129px,
      white 129px
    ) 176px 144px,
    
    /* white spacer */
    /* upper part */
    linear-gradient(
      237.5deg,
      transparent 77px,
      white 77px,
      white 129px,
      transparent 129px
    ) 110px 0,
    /* lower part */
    linear-gradient(
      237.5deg,
      transparent 80px,
      white 80px,
      white 132px,
      transparent 132px
    ) 206px 144px,
    
    /* black lines */
    /* upper line */
    linear-gradient(
      180deg,
      white 80px,
      #101c24 80px,
      #101c24 132px,
      white 132px
    ) 220px 0px,
    /* lower line */
    linear-gradient(
      180deg,
      white 12px,
      #101c24 12px,
      #101c24 64px,
      white 64px
    ) 220px 144px;
  
  background-size: 156px 144px;
  background-repeat: no-repeat;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container-haskell&quot;&gt;&lt;div class=&quot;haskell&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can edit this drawing interactively on &lt;a href=&quot;https://codepen.io/trueskawka/pen/pLVGgx?editors=1100&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;script src=&quot;/scripts/linear-gradients.js&quot;&gt;&lt;/script&gt;</content>
              


              
              
              
              
              

              
                <author>
                    <name>alicja</name>
                  
                  
                </author>
              

              

              

              
                <summary type="html">The first part of the drawing with CSS tutorial was all about box shadows. They are pretty flexible when it comes to creating multiple rectangular and circular shapes, but there are some limitations.</summary>
              

              
              
            </entry>
          
        
      
        
          
        
          
        
      
    
  
    
      
        
          
        
          
        
      
    
  
    
      
        
          
        
          
        
      
    
  
    
      
        
          
        
          
            <entry>
              <title type="html">Drawing with CSS - part 1: box shadows</title>

              
                <link href="https://trueskawka.github.io/blog/programming/2018/02/07/drawing-with-CSS-part-1-box-shadows.html" rel="alternate" type="text/html" title="Drawing with CSS - part 1: box shadows" />
                <published>2018-02-07T17:21:00-08:00</published>
                <updated>2018-02-07T17:21:00-08:00</updated>
                <id>https://trueskawka.github.io/blog/programming/2018/02/07/drawing-with-CSS-part-1-box-shadows</id>
                <content type="html" xml:base="https://trueskawka.github.io/blog/programming/2018/02/07/drawing-with-CSS-part-1-box-shadows.html">&lt;p&gt;I have been using CSS as a medium for drawing for the past few months and I appreciate its
versatility and wide support. Since it’s hard to get started without understanding the 
basic concepts and most of the online guides are not focusing on how to draw images with
CSS, I decided to write a few simple guides on creating single div CSS images. In the first
part I’ll focus on drawing using box shadows.&lt;/p&gt;

&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/box-shadows.css&quot; /&gt;

&lt;p&gt;To understand how to use box shadows for drawing, it’s best to see them in action and learn
about different layers we can create with them. Let’s start with a black square div and put it 
in a container.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.container {
  background-color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  height: 200px;
  width: 580px;
  padding-top: 20px;
  padding-bottom: 20px;
}

.boxy {
  background-color: black;
  height: 100px;
  width: 100px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;boxy&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;boxy&lt;/code&gt; element is a base layer for the drawing - every other layer we add is going to be
in some way relative to it (or its parent). The simplest way in which we can add new elements 
without creating new divs is by adding a shadow to &lt;code class=&quot;highlighter-rouge&quot;&gt;boxy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s take a closer look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;box-shadow&lt;/code&gt; property:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inset&lt;/code&gt; [optional] - by default the shadow is assumed to be behind the element (as if the element 
was dropping it), setting it to &lt;code class=&quot;highlighter-rouge&quot;&gt;inset&lt;/code&gt; will cause the shadow to be drawn on the inside&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;offset-x&amp;gt;&lt;/code&gt; (px) - the horizontal offset of the shadow from the default position behind the element, 
positive values push it to the right, negative to the left of the element&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;offset-y&amp;gt;&lt;/code&gt; (px) - the vertical offset of the shadow from the default position behind the element,
positive values push it below the element, negative above the element&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;blur-radius&amp;gt;&lt;/code&gt; (px) - positive values only, the bigger the value the bigger and lighter the shadow&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;spread-radius&amp;gt;&lt;/code&gt; (px) - positive values will expand the shadow, negative will decrease it by adding 
or substracting the provided value from each of the sides&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;color&amp;gt;&lt;/code&gt; (keyword/hex/RGB/HSL) - color of the shadow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s add a shadow to the black box - a light sea-green, 60x60px, solid square below the black square.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.boxy {
  background-color: black;
  height: 100px;
  width: 100px;

  box-shadow: 
    0 120px 0 -20px lightseagreen;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;boxy boxy-shadow&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can add as many box shadows as we want, changing the positions, shapes and colors.
It allows for as many squares as we need, as the box shadows will keep the same shape
as the parent element, that we can place anywhere.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.boxy {
  background-color: black;
  height: 100px;
  width: 100px;

  box-shadow: 
    120px 120px 0 -30px cyan, 
    0 120px 0 -20px lightseagreen,
    -120px 120px 0 -30px cyan;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;boxy boxy-shadows&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But we can have more layers that allow for more shapes - after all, not everything is 
a square. To add an additional layer to the div, we can use the &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt; pseudoelement. 
Pseudoelements in their simplest form &lt;span class=&quot;pseudo&quot;&gt;to add content before&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;But we can use a trick to make them work for creating multi-layered single div images.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;boxy&lt;/code&gt; element is placed inside a container with a position &lt;code class=&quot;highlighter-rouge&quot;&gt;relative&lt;/code&gt;, which allows 
us to use &lt;code class=&quot;highlighter-rouge&quot;&gt;absolute&lt;/code&gt; positioning for the pseudo-elements, directly controling their position.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.boxy:before {
  content: &quot;&quot;;
  background-color: red;
  height: 60px;
  width: 60px;
  position: absolute;
  left: 160px;
  border-radius: 50%;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;boxy boxy-shadows boxy-before&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt; pseudoelement can have its own shadows, with their own positons, sizes and colors.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.boxy:before {
  content: &quot;&quot;;
  background-color: red;
  height: 60px;
  width: 60px;
  position: absolute;
  left: 160px;
  border-radius: 50%;

  box-shadow: 
    -80px 0 0 tomato,
    0 80px 0 -10px tomato;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;boxy boxy-shadows boxy-before-shadows&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Similarly, we can add an &lt;code class=&quot;highlighter-rouge&quot;&gt;:after&lt;/code&gt; element with &lt;code class=&quot;highlighter-rouge&quot;&gt;absolute&lt;/code&gt; positioning, with its own shape and a
set of shadows.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.boxy:after {
  content: &quot;&quot;;
  background-color: green;
  height: 40px;
  width: 60px;
  position: absolute;
  left: 360px;
  
  box-shadow: 
    80px 0 0 yellowgreen,
    0 80px 0 -10px yellowgreen;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;boxy boxy-shadows boxy-before-shadows boxy-after&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Adding all that together allows us to have:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;three base layers with three shapes (the div, its &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;:after&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;unlimited number of shadows for each layer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using only those elements, we can create pretty complex images - let’s work through an example, 
recreating the &lt;a href=&quot;https://www.recurse.com/&quot;&gt;Recurse Center&lt;/a&gt; logo. We’re going to start with a simple 
base div.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rc {
  background-color: black;
  height: 380px;
  width: 300px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container container-rc&quot;&gt;&lt;div class=&quot;rc&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next base shape we need is a rectangle with different proportions than the base
element, for which we’re going to use a &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt; element (or rather, its shadows).&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rc:before {
  content: &quot;&quot;;
  background-color: red;
  height: 200px;
  width: 250px;
  position: absolute;
  top: 20px;
  left: 320px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container container-rc&quot;&gt;&lt;div class=&quot;rc rc-before-show&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First we’re going to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt; element for the screen - both the white border 
and the black interior of it. We can stack box shadows on top of each other, starting 
from the bottom declaration.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rc:before {
  content: &quot;&quot;;
  background-color: transparent;
  height: 200px;
  width: 250px;
  position: absolute;
  top: 20px;
  left: 320px;  
  
  box-shadow:
    /*screen*/
    -295px 20px 0 -20px black,
    -295px 20px 0 0 white;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container container-rc&quot;&gt;&lt;div class=&quot;rc rc-before-screen&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next step is creating the sides of the element, by overlaying white rectangles to
introduce negative space in the image.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rc:before {
  content: &quot;&quot;;
  background-color: transparent;
  height: 200px;
  width: 250px;
  position: absolute;
  top: 20px;
  left: 320px;

  box-shadow:
    /*left side*/
    -450px 185px 0 -85px white,
    -410px 160px 0 -85px white,
    -395px 160px 0 -85px white,

    /*right side*/
    -140px 185px 0 -85px white,
    -180px 160px 0 -85px white,
    -195px 160px 0 -85px white,

    /*screen*/
    -295px 20px 0 -20px black,
    -295px 20px 0 0 white;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container container-rc&quot;&gt;&lt;div class=&quot;rc rc-before-side&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re also going to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt; element to create a key - as the base element
is a rectangle and resizing box shadows substracts the declared value from all sides,
we’re going to first create a white rectangle with the right height for the key and
place the leftmost bottom key on the canvas.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rc:before {
  content: &quot;&quot;;
  background-color: transparent;
  height: 200px;
  width: 250px;
  position: absolute;
  top: 20px;
  left: 320px;

  box-shadow:
    /*key*/
    -360px 245px 0 -87px white,
    
    /*left side*/
    -450px 185px 0 -85px white,
    -410px 160px 0 -85px white,
    -395px 160px 0 -85px white,

    /*right side*/
    -140px 185px 0 -85px white,
    -180px 160px 0 -85px white,
    -195px 160px 0 -85px white,

    /*screen*/
    -295px 20px 0 -20px black,
    -295px 20px 0 0 white;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container container-rc&quot;&gt;&lt;div class=&quot;rc rc-before-key&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can now add more keys by overlaying white and black rectangles of appropriate 
height and offsetting them by 25px in a grid, to create two rows of keys.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rc:before {
  content: &quot;&quot;;
  background-color: transparent;
  height: 200px;
  width: 250px;
  position: absolute;
  top: 20px;
  left: 320px;

  box-shadow:
    /*top row*/
    -160px 220px 0 -87px black,
    -185px 220px 0 -87px white,
    -210px 220px 0 -87px black,
    -235px 220px 0 -87px white,
    -260px 220px 0 -87px black,
    -285px 220px 0 -87px white,
    -310px 220px 0 -87px black,
    -335px 220px 0 -87px white,

    /*bottom row*/
    -185px 245px 0 -87px black,
    -210px 245px 0 -87px white,
    -235px 245px 0 -87px black,
    -260px 245px 0 -87px white,
    -285px 245px 0 -87px black,
    -310px 245px 0 -87px white,
    -335px 245px 0 -87px black,
    -360px 245px 0 -87px white,
    
    /*left side*/
    -450px 185px 0 -85px white,
    -410px 160px 0 -85px white,
    -395px 160px 0 -85px white,

    /*right side*/
    -140px 185px 0 -85px white,
    -180px 160px 0 -85px white,
    -195px 160px 0 -85px white,

    /*screen*/
    -295px 20px 0 -20px black,
    -295px 20px 0 0 white;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container container-rc&quot;&gt;&lt;div class=&quot;rc rc-before-keys&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This leaves us with a residual black rectangle from overlaying the rightmost key
in the upper row, which we’re going to overlay with a white shadow.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rc:before {
  content: &quot;&quot;;
  background-color: transparent;
  height: 200px;
  width: 250px;
  position: absolute;
  top: 20px;
  left: 320px;

  box-shadow:
    /*top row fix*/
    -20px 180px 0 0px white, 

    /*top row*/
    -160px 220px 0 -87px black,
    -185px 220px 0 -87px white,
    -210px 220px 0 -87px black,
    -235px 220px 0 -87px white,
    -260px 220px 0 -87px black,
    -285px 220px 0 -87px white,
    -310px 220px 0 -87px black,
    -335px 220px 0 -87px white,

    /*bottom row*/
    -185px 245px 0 -87px black,
    -210px 245px 0 -87px white,
    -235px 245px 0 -87px black,
    -260px 245px 0 -87px white,
    -285px 245px 0 -87px black,
    -310px 245px 0 -87px white,
    -335px 245px 0 -87px black,
    -360px 245px 0 -87px white,
    
    /*left side*/
    -450px 185px 0 -85px white,
    -410px 160px 0 -85px white,
    -395px 160px 0 -85px white,

    /*right side*/
    -140px 185px 0 -85px white,
    -180px 160px 0 -85px white,
    -195px 160px 0 -85px white,
    
    /*screen*/
    -295px 20px 0 -20px black,
    -295px 20px 0 0 white;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container container-rc&quot;&gt;&lt;div class=&quot;rc rc-before&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the last part of the image, we’re going to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;:after&lt;/code&gt; pseudoelement, even 
though we could reuse the base shape from the &lt;code class=&quot;highlighter-rouge&quot;&gt;:before&lt;/code&gt;. It will allow for adding a
simple animation to the image with just the elements we’re going to animate - if we
put all of the code in the same pseudoelement, we’d need to repeat all the code in 
the animation.&lt;/p&gt;

&lt;p&gt;Let’s start with a base shape.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rc:after {
  content: &quot;&quot;;
  background-color: green;
  height: 200px;
  width: 200px;
  position: absolute;
  top: 20px;
  left: 320px;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container container-rc&quot;&gt;&lt;div class=&quot;rc rc-before rc-after-show&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We’re going to reuse this shape to overlay elements on the screen, in the same way we
did it for the keys, without the need to overlay green and black elements as the base
shape is a square.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rc:after {
  content: &quot;&quot;;
  background-color: transparent;
  height: 200px;
  width: 200px;
  position: absolute;
  top: 20px;
  left: 320px;

  box-shadow:
    /*top row*/
    -258px -20px 0 -87px #5dbd49,
    -310px -20px 0 -87px #5dbd49,
    -362px -20px 0 -87px #5dbd49,

    /*bottom row*/
    -235px 30px 0 -87px #5dbd49,
    -260px 30px 0 -87px #5dbd49,
    -312px 30px 0 -87px #5dbd49,    
    -337px 30px 0 -87px #5dbd49;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container container-rc&quot;&gt;&lt;div class=&quot;rc rc-before rc-after&quot;&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we can add an animation to the &lt;code class=&quot;highlighter-rouge&quot;&gt;:after&lt;/code&gt; layer without changing any of the other elements
in the image. We’re going to use a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;@keyframes&lt;/code&gt; approach.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.rc:after {
  content: &quot;&quot;;
  background-color: transparent;
  height: 200px;
  width: 200px;
  position: absolute;
  top: 20px;
  left: 320px;

  box-shadow:
    /*top row*/
    -258px -20px 0 -87px #5dbd49,
    -310px -20px 0 -87px #5dbd49,
    -362px -20px 0 -87px #5dbd49,

    /*bottom row*/
    -235px 30px 0 -87px #5dbd49,
    -260px 30px 0 -87px #5dbd49,
    -312px 30px 0 -87px #5dbd49,    
    -337px 30px 0 -87px #5dbd49;

  animation: pride 3s linear infinite;
}

@keyframes pride {
  0% {
    box-shadow:
    /*top row*/
    -258px -20px 0 -87px #5dbd49,
    -310px -20px 0 -87px #5dbd49,
    -362px -20px 0 -87px #5dbd49,

    /*bottom row*/
    -235px 30px 0 -87px #5dbd49,
    -260px 30px 0 -87px #5dbd49,
    -312px 30px 0 -87px #5dbd49,    
    -337px 30px 0 -87px #5dbd49; 
  }
  24% {
    box-shadow:
    /*top row*/
    -258px -20px 0 -87px #5dbd49,
    -310px -20px 0 -87px #5dbd49,
    -362px -20px 0 -87px #5dbd49,

    /*bottom row*/
    -235px 30px 0 -87px #5dbd49,
    -260px 30px 0 -87px #5dbd49,
    -312px 30px 0 -87px #5dbd49,    
    -337px 30px 0 -87px #5dbd49;
  }
  25% {
    box-shadow:
    /*top row*/
    -258px -20px 0 -87px #5dbd49,
    -310px -20px 0 -87px #4b9bde,
    -362px -20px 0 -87px #8f71b9,

    /*bottom row*/
    -235px 30px 0 -87px #e25786,
    -260px 30px 0 -87px #e25786,
    -312px 30px 0 -87px #f19e5a,    
    -337px 30px 0 -87px #f19e5a;
  }
  49% {
    box-shadow:
    /*top row*/
    -258px -20px 0 -87px #5dbd49,
    -310px -20px 0 -87px #4b9bde,
    -362px -20px 0 -87px #8f71b9,

    /*bottom row*/
    -235px 30px 0 -87px #e25786,
    -260px 30px 0 -87px #e25786,
    -312px 30px 0 -87px #f19e5a,    
    -337px 30px 0 -87px #f19e5a;
  }
  50% {
    box-shadow:
    /*top row*/
    -258px -20px 0 -87px #f19e5a,
    -310px -20px 0 -87px #5dbd49,
    -362px -20px 0 -87px #4b9bde,

    /*bottom row*/
    -235px 30px 0 -87px #8f71b9,
    -260px 30px 0 -87px #8f71b9,
    -312px 30px 0 -87px #e25786,    
    -337px 30px 0 -87px #e25786;
  }
  74% {
    box-shadow:
    /*top row*/
    -258px -20px 0 -87px #f19e5a,
    -310px -20px 0 -87px #5dbd49,
    -362px -20px 0 -87px #4b9bde,

    /*bottom row*/
    -235px 30px 0 -87px #8f71b9,
    -260px 30px 0 -87px #8f71b9,
    -312px 30px 0 -87px #e25786,    
    -337px 30px 0 -87px #e25786;
  }
  75% {
    box-shadow:
    /*top row*/
    -258px -20px 0 -87px #e25786,
    -310px -20px 0 -87px #f19e5a,
    -362px -20px 0 -87px #5dbd49,

    /*bottom row*/
    -235px 30px 0 -87px #4b9bde,
    -260px 30px 0 -87px #4b9bde,
    -312px 30px 0 -87px #8f71b9,    
    -337px 30px 0 -87px #8f71b9;
  }
  100% {
    box-shadow:
    /*top row*/
    -258px -20px 0 -87px #e25786,
    -310px -20px 0 -87px #f19e5a,
    -362px -20px 0 -87px #5dbd49,

    /*bottom row*/
    -235px 30px 0 -87px #4b9bde,
    -260px 30px 0 -87px #4b9bde,
    -312px 30px 0 -87px #8f71b9,    
    -337px 30px 0 -87px #8f71b9;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;container container-rc&quot;&gt;&lt;div class=&quot;rc rc-before rc-after-animated&quot;&gt;&lt;/div&gt;&lt;/div&gt;</content>
              


              
              
              
              
              

              
                <author>
                    <name>alicja</name>
                  
                  
                </author>
              

              

              

              
                <summary type="html">I have been using CSS as a medium for drawing for the past few months and I appreciate its versatility and wide support. Since it’s hard to get started without understanding the basic concepts and most of the online guides are not focusing on how to draw images with CSS, I decided to write a few simple guides on creating single div CSS images. In the first part I’ll focus on drawing using box shadows.</summary>
              

              
              
            </entry>
          
        
      
        
          
        
          
        
      
    
  
    
      
        
          
        
          
            <entry>
              <title type="html">Git branch in your prompt</title>

              
                <link href="https://trueskawka.github.io/blog/programming/2018/01/17/git-branch-in-your-prompt.html" rel="alternate" type="text/html" title="Git branch in your prompt" />
                <published>2018-01-17T20:41:00-08:00</published>
                <updated>2018-01-17T20:41:00-08:00</updated>
                <id>https://trueskawka.github.io/blog/programming/2018/01/17/git-branch-in-your-prompt</id>
                <content type="html" xml:base="https://trueskawka.github.io/blog/programming/2018/01/17/git-branch-in-your-prompt.html">&lt;p&gt;I have paired a lot over the past week (which makes me tremendously happy!)
and I noticed how lost I can get in someone else’s terminal if I don’t have
my regular bash prompt - not only the cute little heart that welcomes me
every time I run the terminal, but also the git branch name I’m currently on.&lt;/p&gt;

&lt;p&gt;As I couldn’t find the tutorial I used to learn how to parse the git branch, 
I decided to go through my &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; and write one myself.&lt;/p&gt;

&lt;h3 id=&quot;bash-prompt-variables&quot;&gt;Bash prompt variables&lt;/h3&gt;
&lt;p&gt;Bash prompt variables hold the text that shows as the terminal prompt in 
various contexts. Their values are examined and executed just before Bash 
prints them. There are several of them, but for now I’m going to 
focus on &lt;code class=&quot;highlighter-rouge&quot;&gt;PS1&lt;/code&gt;, which is the primary prompt string.&lt;/p&gt;

&lt;p&gt;In a bash prompt, you can use:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://tiswww.case.edu/php/chet/bash/bashref.html#Controlling-the-Prompt&quot;&gt;special characters&lt;/a&gt; 
that can be used for current user name (&lt;code class=&quot;highlighter-rouge&quot;&gt;\u&lt;/code&gt;), time (&lt;code class=&quot;highlighter-rouge&quot;&gt;\t&lt;/code&gt;), host name (&lt;code class=&quot;highlighter-rouge&quot;&gt;\h&lt;/code&gt;) etc.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code#Colors&quot;&gt;colors&lt;/a&gt; both for the 
foreground and the background&lt;/li&gt;
  &lt;li&gt;unicode characters (letters, numbers, symbols, emoji)&lt;/li&gt;
  &lt;li&gt;custom variables&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s look at an example value of &lt;code class=&quot;highlighter-rouge&quot;&gt;PS1&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;\s-\v\$&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\s&lt;/code&gt; the name of the shell&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; just a dash&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\v&lt;/code&gt; the version of the shell&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; a dollar sign at the end of the prompt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;which in my terminal evaluates to: &lt;code class=&quot;highlighter-rouge&quot;&gt;-bash-3.2$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To change the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;PS1&lt;/code&gt; for the current session, you can use 
&lt;code class=&quot;highlighter-rouge&quot;&gt;export PS1=&quot;&amp;lt;value&amp;gt;&quot;&lt;/code&gt; in the terminal:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;adding a lambda
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PS1=&quot;λ &quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;changing the lambda’s color to red
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PS1=&quot;\[\033[0;31m\]λ \[\033[0m\]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;adding the current directory before the red lambda
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PS1=&quot;\w\[\033[0;31m\] λ \[\033[0m\]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and so on.&lt;/p&gt;

&lt;p&gt;If you want to make the &lt;code class=&quot;highlighter-rouge&quot;&gt;PS1&lt;/code&gt; more permanent, you can add it to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;,
if &lt;a href=&quot;https://apple.stackexchange.com/questions/51036/what-is-the-difference-between-bash-profile-and-bashrc&quot;&gt;you’re on a Mac&lt;/a&gt;),
reload your session with&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source .bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;et voilà!&lt;/p&gt;

&lt;h3 id=&quot;getting-information-from-git&quot;&gt;Getting information from git&lt;/h3&gt;
&lt;p&gt;When I work on code, I usually want to know a few things:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;am I using git? (if not, I might want to &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;what branch I am currently on?&lt;/li&gt;
  &lt;li&gt;are there any changes in the directory - untracked, unadded, added or deleted files?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of those things I can check by simply using the &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; command, but it gets 
tedious to do that every time I need to change something (am I on the right branch? 
did I add everything? did I switch to a feature branch?). I can also parse git commands 
output with Bash and add the parsed information to my prompt, using custom variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Branch&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In order to get the current branch, you can parse the output of
&lt;a href=&quot;https://stackoverflow.com/questions/6245570/how-to-get-the-current-branch-name-in-git&quot;&gt;several different git commands&lt;/a&gt;. 
I don’t think there is one good way to do it, as you might want to get slightly different
results depending on the context, but some good ideas are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git rev-parse --abbrev-ref HEAD&lt;/code&gt; - which gives you the right name of the local branch and consistent 
&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; for other contexts&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch | sed -n '/\* /s///p'&lt;/code&gt; - which gives you the right name of the local branch and appropriate
outputs for other contexts&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Whichever method you choose, to add it to your &lt;code class=&quot;highlighter-rouge&quot;&gt;PS1&lt;/code&gt; prompt you can:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;add a function for parsing the branch (the &lt;code class=&quot;highlighter-rouge&quot;&gt;2&amp;gt;/dev/null&lt;/code&gt; stops the command from printing the output):
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git_prompt() {
  local ref=$(git branch 2&amp;gt;/dev/null | sed -n '/\* /s///p')
  if [ &quot;$ref&quot; != &quot;&quot; ]
  then
    echo &quot;($ref) &quot;
  fi
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;add the function output to your prompt
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PS1=&quot;\w\[\033[0;31m\] λ $(git_prompt)\[\033[0m\]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;or, with a hint of color&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PS1=&quot;\w\[\033[0;31m\] λ \[\033[0;95m\]\$(git_prompt)\[\033[0m\]\[\033[0m\]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Number of various changes&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can run &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt; with various options - if you use the &lt;a href=&quot;https://git-scm.com/docs/git-status#_short_format&quot;&gt;short format&lt;/a&gt;,
you will get the statuses of your paths that are a bit easier to understand for parsing purposes, notably:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; for untracked paths&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;M&lt;/code&gt; for modified paths&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; for added paths&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; for deleted paths&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To parse untracked paths you can:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;grep &lt;code class=&quot;highlighter-rouge&quot;&gt;git status --porcelain&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;?&lt;/code&gt; and count the number of lines in the output (as each untracked path
is on a new line)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;untracked=`expr $(git status --porcelain 2&amp;gt;/dev/null | grep &quot;?&quot; | wc -l)`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;wrap it in a function that returns the number of untracked paths with a symbol of your choice when it’s not 0
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function parse_untracked {
  local untracked=`expr $(git status --porcelain 2&amp;gt;/dev/null | grep &quot;?&quot; | wc -l)`
  if [ &quot;$untracked&quot; != &quot;0&quot; ]
  then
    echo &quot; ?$untracked&quot;
  fi
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;add it to your &lt;code class=&quot;highlighter-rouge&quot;&gt;PS1&lt;/code&gt; prompt
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git_prompt() {
  local ref=$(git branch 2&amp;gt;/dev/null | sed -n '/\* /s///p')
  if [ &quot;$ref&quot; != &quot;&quot; ]
  then
    echo &quot;($ref)$(parse_untracked) &quot;
  fi
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can add a separate function for each status and add them to your prompt by simply grepping for the appropriate
symbol and wrapping it in a function. For reference, my full git parsing code is 
&lt;a href=&quot;https://gist.github.com/trueskawka/aab826ea75d7219790df92fba8bb8e47&quot;&gt;in this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Have fun adjusting your prompt and hopefully never getting lost among your git branches!&lt;/p&gt;</content>
              


              
              
              
              
              

              
                <author>
                    <name>alicja</name>
                  
                  
                </author>
              

              

              

              
                <summary type="html">I have paired a lot over the past week (which makes me tremendously happy!) and I noticed how lost I can get in someone else’s terminal if I don’t have my regular bash prompt - not only the cute little heart that welcomes me every time I run the terminal, but also the git branch name I’m currently on.</summary>
              

              
              
            </entry>
          
        
      
        
          
        
          
        
      
    
  
    
      
        
          
        
          
            <entry>
              <title type="html">Making pairing flow</title>

              
                <link href="https://trueskawka.github.io/blog/programming/2018/01/03/making-pairing-flow.html" rel="alternate" type="text/html" title="Making pairing flow" />
                <published>2018-01-03T17:25:00-08:00</published>
                <updated>2018-01-03T17:25:00-08:00</updated>
                <id>https://trueskawka.github.io/blog/programming/2018/01/03/making-pairing-flow</id>
                <content type="html" xml:base="https://trueskawka.github.io/blog/programming/2018/01/03/making-pairing-flow.html">&lt;p&gt;As my second batch at the Recurse Center is approaching, I can’t help
but to be excited for all the pairings to come. I enjoy learning by 
working with others - other than improving my coding style and understanding
how to solve problems better, I always pick up all sorts of little tweaks 
and ideas while geeking out over someone’s setup.&lt;/p&gt;

&lt;p&gt;Since many of my batchlings are going to be new to the community, I wanted to think
of some rules for pairing that could improve the experience for all those involved,
other than the &lt;a href=&quot;https://www.recurse.com/manual#sub-sec-social-rules&quot;&gt;Recurse Center social rules&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In general, I find there are a at least three types of potentially great pairing 
experiences:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;helping someone out - when one of the parties has an issue and they’re looking 
for some guidance from a pairing partner more experienced in the area of interest&lt;/li&gt;
  &lt;li&gt;exploring a concept together - when both parties are looking forward to tackle
a new problem together, regardless of their perceived experience&lt;/li&gt;
  &lt;li&gt;rubber-ducking - when one of the parties needs to talk to another programmer, 
be it on a more general, problem-solving level or particulars of their code that
make for a mind-boggling puzzle they’re struggling with, again - regardless of their 
perceived experience (it is often the “stupid” or “beginner” questions that we 
forget to ask ourselves when debugging our own code that are just the right questions)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;have-a-good-setup&quot;&gt;Have a good setup&lt;/h3&gt;

&lt;p&gt;Don’t assume your setup is going to work for pairing out of the box. Think of possible 
obstacles and make sure your pairing partner is comfortable, e.g. I promise to 
increase my 8-point font and adjust the brightness, so you can read everything you 
need on my tiny screen.&lt;/p&gt;

&lt;p&gt;The best approach is to find the lowest common denominator - no Vim/Emacs bindings, 
no dark magic shortcuts and gear. Using a text editor with at least some GUI (VS Code, 
Atom), a separate window for the terminal and a browser window for web testing usually 
works. Sometimes even a simple service like &lt;a href=&quot;https://glitch.com/&quot;&gt;Glitch&lt;/a&gt; or &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt; 
is enough.&lt;/p&gt;

&lt;h3 id=&quot;keyboard-is-lava&quot;&gt;Keyboard is lava&lt;/h3&gt;

&lt;p&gt;During pairing it’s usually best that only one person types - they’re called the 
driver and their role is to implement your shared ideas in code. The more beginner 
they are, the better for them to be the person writing the code, since they can 
make mistakes and learn from them through discussing and correcting them together. 
They won’t learn as much from simply observing.&lt;/p&gt;

&lt;p&gt;Even if you are much better at typing, please, don’t take over the keyboard. It 
happened to me more than once, usually out of the sheer eagerness of my pairing 
partner to just solve the problem at hand, and I always felt intimidated by it.&lt;/p&gt;

&lt;h3 id=&quot;know-whats-important&quot;&gt;Know what’s important&lt;/h3&gt;

&lt;p&gt;When pairing, try to focus on the problem at hand - you are giving/receiving the most
important asset one can give, their time and attention. There is no point in focusing
on unrelevant details, e.g. I might write terribly suboptimal Python, but if the 
purpose of the pairing is first and foremost for me to understand how merge sort works,
optimizing too early might not be all too helpful.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When helping - depending of how experienced your pairing partner is, there might be 
 an urge to solve every possible problem together - if you have a ton of time, that’s a 
 wonderful way to spend the afternoon/night! Learning from more experienced developers
 is always fun, especially when they can also learn a trick or two from their 
 pairing buddies.&lt;/p&gt;

    &lt;p&gt;Most of the time the pairing is focused around a particular problem. If you are 
 helping someone out, they probably went through at least a few ideas and have tried
 various approaches. Before you get started, make sure you know:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;what is the problem&lt;/li&gt;
      &lt;li&gt;what has already been tried&lt;/li&gt;
      &lt;li&gt;what kind of help are they looking for&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When asking for help - &lt;a href=&quot;https://blogs.akamai.com/2013/10/you-must-try-and-then-you-must-ask.html&quot;&gt;before you ask, try&lt;/a&gt;. 
 Try to understand where and why you have a problem, so that you can describe it to 
 your pairing partner. Check for all the usual suspects (semicolons, not passing 
 arguments, not calling the function, typos) - you shouldn’t be embarassed if your 
 problem turns out to be “just” about a typo, but more often than not you probably will 
 feel bad for “wasting” someone’s time (please, don’t - you learn by making mistakes).&lt;/p&gt;

    &lt;p&gt;Before you get started:&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;give a brief overview of your code&lt;/li&gt;
      &lt;li&gt;describe the problem and the approaches you already tried&lt;/li&gt;
      &lt;li&gt;talk about your hypotheses as to where the issue might be&lt;/li&gt;
      &lt;li&gt;say what kind of help you are looking for&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When pairing on a new problem  - be it a “Cracking the Coding Interview” 
 question or a project you are building together, try to define what are you looking to 
 do during the pairing session. Decide together on the setup, stack and other relevant
 technical details.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;be-mindful&quot;&gt;Be mindful&lt;/h3&gt;

&lt;p&gt;Pairing is meant to be a pleasurable experience for all parties involved, but we do 
make mistakes - you might tell an unfortunate joke or the solution you propose ends 
up causing a stack overflow. That’s all good, as long as you are mindful and open 
to correcting any missteps.&lt;/p&gt;

&lt;p&gt;Think of pairing as canoeing together (or dancing, if that’s a more appealing 
metaphor). There is a rhythm to it and a direction you’re working towards, but there
is also the pleasure of being in the moment together and enjoying the experience. If 
you’re going to go in different directions or not find a shared rhythm to it, the canoe
might end up spinning in the middle of the river and you will get nowhere.&lt;/p&gt;

&lt;p&gt;Finding the right balance might take time, but it’s rewarding. Also, you don’t have 
to have a great experience with everyone - even when you’re both excited about 
programming and mindful, you might just not be good pairing partners. And that’s okay.&lt;/p&gt;</content>
              


              
              
              
              
              

              
                <author>
                    <name>alicja</name>
                  
                  
                </author>
              

              

              

              
                <summary type="html">As my second batch at the Recurse Center is approaching, I can’t help but to be excited for all the pairings to come. I enjoy learning by working with others - other than improving my coding style and understanding how to solve problems better, I always pick up all sorts of little tweaks and ideas while geeking out over someone’s setup.</summary>
              

              
              
            </entry>
          
        
      
        
          
        
          
        
      
    
  
</feed>
