<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://trueskawka.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://trueskawka.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2016-10-20T16:30:49-04:00</updated><id>https://trueskawka.github.io/</id><title>Alicja Raszkowska</title><entry><title>Learning by observing</title><link href="https://trueskawka.github.io/blog/programming/2016/10/20/learning-by-observing.html" rel="alternate" type="text/html" title="Learning by observing" /><published>2016-10-20T15:48:00-04:00</published><updated>2016-10-20T15:48:00-04:00</updated><id>https://trueskawka.github.io/blog/programming/2016/10/20/learning-by-observing</id><content type="html" xml:base="https://trueskawka.github.io/blog/programming/2016/10/20/learning-by-observing.html">&lt;p&gt;Recently I’ve had the pleasure of seeing &lt;a href=&quot;https://www.harihareswara.net/&quot;&gt;Sumana Harihareswara&lt;/a&gt; live documenting &lt;a href=&quot;https://zulip.tabbott.net/#narrow/stream/test.20suites/topic/watch.20over.20my.20shoulder.20as.20I.20improve.20the.20linter&quot;&gt;a coding adventure&lt;/a&gt; on Zulip. As I wanted to learn even more from this experience, I’ve reread it and tried to break it into high level activities.&lt;/p&gt;

&lt;h4 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h4&gt;
&lt;p&gt;The following text is a rephrasing of a live-coding session. If you find any smart, hilarious and generally great quotes - those are Sumana’s words when not directly attributed and Steve’s or Tim’s words for the appropriate dramatis persona.&lt;/p&gt;

&lt;h2 id=&quot;updating-the-linter&quot;&gt;Updating the Linter&lt;/h2&gt;

&lt;h3 id=&quot;an-adventure-in-eight-and-some-acts&quot;&gt;an Adventure in Eight and Some Acts&lt;/h3&gt;

&lt;h4 id=&quot;dramatis-personae&quot;&gt;Dramatis personae&lt;/h4&gt;
&lt;p&gt;The Developer - Sumana Harihareswara&lt;/p&gt;

&lt;p&gt;The Counselor - Steve Howell&lt;/p&gt;

&lt;p&gt;The Backstage Voice - Tim Abbott&lt;/p&gt;

&lt;h3 id=&quot;acts-1---finding-an-adventure&quot;&gt;Acts[-1] - Finding an Adventure&lt;/h3&gt;

&lt;p&gt;The Developer noticed a disturbing string in one of the &lt;a href=&quot;https://github.com/zulip/zulip/commit/ca1789892dca27f8acdb57344f12d571ee5649ca&quot;&gt;recent commits to Zulip&lt;/a&gt;.
An existing linter rule for assuring proper capitalization of &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; seems not to be working. It should find any unwanted occurrences of &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Javascript&lt;/code&gt; during testing and suggest a change in code.&lt;/p&gt;

&lt;h3 id=&quot;whats-a-linter&quot;&gt;&lt;em&gt;What’s a linter?&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Lint_(software)&quot;&gt;source: Wikpedia&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A linter (or lint) is a tool that flags suspicious usage in any computer language. Lint-like tools generally perform static analysis of source code. Linters are used for finding common errors in code, e.g. syntactic discrepancies in the code - mainly code that doesn’t correspond to style guidelines or doesn’t follow specific rules.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I’ve had an example of that in my own code - Zulip linter tests were failing, because I didn’t use the 4-space indentation in JavaScript, as defined in the style guideline.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;acts0---gearing-up-for-the-adventure&quot;&gt;Acts[0] - Gearing up for the Adventure&lt;/h3&gt;

&lt;p&gt;Before the adventure, the Developer updates her local repository with a shell script, as to assure it’s up to date and any possible bugs are not caused by outdated code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# update a bunch of Zulip git repositories&lt;/span&gt;

checkout_repo&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    git checkout master
    git pull upstream master
    git push origin master
    git checkout -
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;repo &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;zulip zulip-android zulip-electron zulip.github.io
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repo&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
    checkout_repo
    &lt;span class=&quot;nb&quot;&gt;popd
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;acts1---in-search-of-code&quot;&gt;Acts[1] - In Search of Code&lt;/h3&gt;

&lt;p&gt;The Developer remembers she was facing a similar problem earlier and so she uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;git log --grep=&quot;JavaScript&quot;&lt;/code&gt; command to find an appropriate commit, with which she finds:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;commit 2338421c6ddf8c520f2ebbb5b3c040aebc1ad197
Author: Tim Abbott &amp;lt;tabbott@mit.edu&amp;gt;
Date:   Tue Jul 12 19:22:21 2016 -0700

    lint: Add documentation lint check for JavaScript spelling.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;She then copies the commit hash and runs &lt;code class=&quot;highlighter-rouge&quot;&gt;git show 2338421c6ddf8c520f2ebbb5b3c040aebc1ad197&lt;/code&gt;, to see changes introduced in that commit. She has identified a change to &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lint-all&lt;/code&gt; that has a pattern having to do with the word &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-markdown_rules = markdown_whitespace_rules
+markdown_rules = markdown_whitespace_rules + [
+    {'pattern': ' [jJ]avascript',
+     'exclude': set(['README.dev.md']), # temporary exclusion to avoid merge conflicts
+     'description': &quot;javascript should be spelled JavaScript&quot;},
+]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;She realizes that the solution is going to involve a regular expression (“regex”).&lt;/p&gt;

&lt;p&gt;To make sure that the appropriate file to edit is &lt;code class=&quot;highlighter-rouge&quot;&gt;tools/lint-all&lt;/code&gt;, the Developer turns to the &lt;a href=&quot;https://zulip.readthedocs.io/en/latest/testing.html&quot;&gt;testing documentation&lt;/a&gt;. It has a link to the &lt;a href=&quot;https://zulip.readthedocs.io/en/latest/linters.html&quot;&gt;linter(s)&lt;/a&gt; and she finds reassurance in the quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most of our lint checks get performed by &lt;code class=&quot;highlighter-rouge&quot;&gt;./tools/lint-all&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Developer finds the relevant code on line &lt;code class=&quot;highlighter-rouge&quot;&gt;333&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;markdown_rules = markdown_whitespace_rules + [
    {'pattern': ' [jJ]avascript',
     'exclude': set(['README.dev.md']), # temporary exclusion to avoid merge conflicts
     'description': &quot;javascript should be spelled JavaScript&quot;},
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and she wonders if she should remove the temporary exclusion of &lt;code class=&quot;highlighter-rouge&quot;&gt;README.dev.md&lt;/code&gt; - is it a thing of the past?&lt;/p&gt;

&lt;p&gt;In her terminal she goes to &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt;, starts doing &lt;code class=&quot;highlighter-rouge&quot;&gt;ls RE&lt;/code&gt; and hits tab to see what completes - there’s only &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt;. But she wants to be sure:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ find . -iname &quot;*.dev.md&quot;
$ find . -iname &quot;README.md&quot;
./README.md
$ find . -iname &quot;*README.md&quot;
./README.md
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and it means there are &lt;em&gt;no&lt;/em&gt; results when she searches case-insensitively for the files that end with &lt;code class=&quot;highlighter-rouge&quot;&gt;.dev.md&lt;/code&gt;. Just to be sure that her syntax was right, the Developer searched for something that she knew was there, and it worked.&lt;/p&gt;

&lt;h3 id=&quot;acts2---branching&quot;&gt;Acts[2] - Branching&lt;/h3&gt;

&lt;p&gt;The Developer decides it’s time to make a change, which means it’s time to switch to a new branch in git!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git checkout -b JavaScript-linter
Switched to a new branch 'JavaScript-linter'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;She quickly deletes the exclusion line and saves the file.&lt;/p&gt;

&lt;p&gt;Now there is time for the real adventure to begin - why is the current rule, that searches for &lt;code class=&quot;highlighter-rouge&quot;&gt;[jJ]avascript&lt;/code&gt;, not working with the commit in question (&lt;code class=&quot;highlighter-rouge&quot;&gt;ca1789892dca27f8acdb57344f12d571ee5649ca&lt;/code&gt;)? That regular expression should catch the lower-case &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ah but wait! The actual line says:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'pattern': ' [jJ]avascript'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There’s a space before the bracket! Maybe - yes, the commit that just came through has the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;a href=&quot;https://github.com/zulip/zulip-js&quot;&amp;gt;Javascript library&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Which means there’s no space before the initial J! So maybe deleting the space will allow the linter to catch this problem.&lt;/p&gt;

&lt;p&gt;The Developer decides to do just that and run the linter - she deletes the space and saves the file.&lt;/p&gt;

&lt;h3 id=&quot;acts3---testing-the-null-hypothesis&quot;&gt;Acts[3] - Testing the Null Hypothesis&lt;/h3&gt;
&lt;p&gt;The Developer wants to run the linter. She wants to save some time and decides not to run Vagrant - in a bold move she just starts up her &lt;code class=&quot;highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt; that has the right packages installed:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ workon zulip
$ cd ..
$ ./tools/lint-all
ImportError: No module named typing
You need to run the Zulip linters inside a Zulip dev environment.
If you are using Vagrant, you can `vagrant ssh` to enter the Vagrant guest.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As this approach fails her, she decides to reprovision Vagrant:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant up
$ vagrant ssh
$ cd /srv/zulip
$ python tools/provision.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;The Developer goes in search for refreshments and conquers her email, as reprovisioning takes some time&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After the reprovisioning is done, the Developer runs the linter:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(zulip-venv)vagrant@vagrant-base-trusty-amd64:/srv/zulip$ ./tools/lint-all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And she encounters a different result:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;javascript should be spelled JavaScript at docs/code-style.md line 140:
[[1]](http://stackoverflow.com/questions/500504/javascript-for-in-with-arrays),

javascript should be spelled JavaScript at docs/code-style.md line 141:
[[2]](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#for-in_loop),
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Developer quickly realizes the space in the regex was there to avoid the situation when a lowercased &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript&lt;/code&gt; in a URL would cause a linter problem. Additionally, the file because of which the adventure began (&lt;code class=&quot;highlighter-rouge&quot;&gt;templates/zerver/api.html&lt;/code&gt;) is not causing the linter to complain, which may mean it’s a word boundary issue.&lt;/p&gt;

&lt;p&gt;Time to use new battle gear - the Developer decides to fire up a regex tool &lt;a href=&quot;http://regexr.com/&quot;&gt;RegExr&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&quot;acts4---in-the-land-of-regex&quot;&gt;Acts[4] - In the Land of Regex&lt;/h3&gt;

&lt;p&gt;RegExr makes it easy to say &lt;em&gt;help me write a regular expression that catches THIS case but not THAT case&lt;/em&gt;. The Developer copies and pastes the lines the linter is complaining about &lt;em&gt;now&lt;/em&gt; and the line from &lt;code class=&quot;highlighter-rouge&quot;&gt;templates/zerver/api.html&lt;/code&gt; that she wants the regex to complain about, into RegExr’s web interface:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;We have a &amp;lt;a href=&quot;/api/endpoints&quot;&amp;gt;well-documented API&amp;lt;/a&amp;gt; that allows you to build custom integrations, in addition to our &amp;lt;a href=&quot;/integrations&quot;&amp;gt;existing integrations&amp;lt;/a&amp;gt;. For ease-of-use, we've created a Python module that you can drop in to a project to start interacting with our API. There is also a &amp;lt;a href=&quot;https://github.com/zulip/zulip-js&quot;&amp;gt;Javascript library&amp;lt;/a&amp;gt; that can be used either in the browser or in Node.js.&amp;lt;/p&amp;gt;
[[1]](http://stackoverflow.com/questions/500504/javascript-for-in-with-arrays),
[[2]](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#for-in_loop)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://dl.dropboxusercontent.com/u/56085440/photos/other/regexr.png&quot; data-lightbox=&quot;regexr&quot; data-title=&quot;&quot;&gt;
  &lt;img src=&quot;https://dl.dropboxusercontent.com/u/56085440/photos/other/regexr.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;She is going to try to find a regex that only matches what she wants to match and chooses the current &lt;code class=&quot;highlighter-rouge&quot;&gt;'[jJ]avascript'&lt;/code&gt; rule as her starting point. Before she starts the regex struggle, she skims the code of &lt;code class=&quot;highlighter-rouge&quot;&gt;lint-all&lt;/code&gt;, to make sure no comments require anything particularly special in the syntax of regular expressions. She notices a few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the line she’s editing is within the &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown_rules&lt;/code&gt; definition, which is within the &lt;code class=&quot;highlighter-rouge&quot;&gt;build_custom_checkers&lt;/code&gt; function&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;later, in another function (&lt;code class=&quot;highlighter-rouge&quot;&gt;check_custom_checks_nonpy&lt;/code&gt; within the &lt;code class=&quot;highlighter-rouge&quot;&gt;build_custom_checkers&lt;/code&gt; function), there’s:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      for fn in by_lang['md']:
          if custom_check_file(fn, markdown_rules):
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;So &lt;code class=&quot;highlighter-rouge&quot;&gt;build_custom_checkers&lt;/code&gt; is a higher-order function that has other functions within it. But the main thing is, the rule she’s editing is one that only gets applied to Markdown files (filenames ending in &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the top of the file includes &lt;code class=&quot;highlighter-rouge&quot;&gt;import re&lt;/code&gt; which is the part of the standard library that does regular expression parsing - she thinks that implies she can use regular regexes and there’s nothing special about the syntax the linter will use&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The view of the numerous rules fills her heart with joy -  it’s great that these rules save us from bugs!&lt;/p&gt;

&lt;p&gt;The Developer turns back to RegExr and she is confused - the initial rule &lt;code class=&quot;highlighter-rouge&quot;&gt;[jJ]avascript&lt;/code&gt; matches everything, so why doesn’t the linter catch the first issue? She remembers that it is in an HTML page, not a Markdown page!&lt;/p&gt;

&lt;p&gt;In conclusion, she now has two problems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;how to deal with the possibility that the word might have or not have a space in front of it (but exclude URLs)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;how to get this check to happen in HTML pages as well as Markdown pages&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;She wonders if she could build on others’ work to say “if this is in a URL then don’t bother with it”? She looks in the existing &lt;code class=&quot;highlighter-rouge&quot;&gt;lint-all&lt;/code&gt; code and searches for “url”, “http” with no luck.&lt;/p&gt;

&lt;p&gt;There’s a common saying in software, the Developer believes initially spoken by Jamie Zawinski:
&amp;gt; You had a problem. You decided to use regular expressions. Now you have two problems.&lt;/p&gt;

&lt;p&gt;Regexes are legendarily headache-inducing.&lt;/p&gt;

&lt;p&gt;Facing this adventure, she can’t think of a better solution. She thinks of turning to the world-renowned Stack Overflow, a source of answers to numerous questions bothering developers, but she first decides to look through RegExr - they may have a library of solutions to common problems like this. She finds the “Community” section and finds &lt;a href=&quot;http://regexr.com/2rj36&quot;&gt;a rule that matches URLs&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/[-a-zA-Z0-9@:%_\+.~#?&amp;amp;//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&amp;amp;//=]*)?/gi
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;which seems like a very long and complicated regex. Does it really need to be that complicated? Won’t URLs start with HTTP? She realizes it’s not always true, as sometimes there will be hyperlinks to references elsewhere in the documentation.&lt;/p&gt;

&lt;p&gt;She checks if there are currently any docs that have &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript&lt;/code&gt; in their filenames:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ find . -iname &quot;*javascript*&quot;
./.git/logs/refs/heads/JavaScript-linter
./.git/refs/heads/JavaScript-linter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and she finds none, but that’s not to say they will never exist.&lt;/p&gt;

&lt;p&gt;She also realizes this RegExr example is clearly also matching email addresses. And there may come a day when in code there will be an address similar to javascript@facebook.com.&lt;/p&gt;

&lt;h3 id=&quot;acts5---enter-the-counselor&quot;&gt;Acts[5] - Enter the Counselor&lt;/h3&gt;

&lt;p&gt;Facing so many doubts, she decides to trust that other engineers will review her pull request and tell her whether there was a better way to do this. The best way she now sees fit to face the problem is to use the regex to exclude URLs, while also including HTML as well as MD files when the linter runs this rule.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: For the proximal problem I’d consider just exempting any case of &lt;code class=&quot;highlighter-rouge&quot;&gt;/javascript&lt;/code&gt; and avoid the nasty URL regex. (But now that you’re looking at the URL regex, maybe make a note of that as something we can additionally clean up. If a simpler URL regex suffices for us, the code will be easier on the eyes and maybe it will run a bit faster too.)&lt;/p&gt;

&lt;p&gt;The Developer fiddles with this regex in RegExr to combine it with the JavaScript check. She comes to a fork on the road - in the alternate universe where she got no advice from the Counselor, she would simply use the RegExr interface to figure out how to say &lt;em&gt;match &lt;code class=&quot;highlighter-rouge&quot;&gt;javascript&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Javascript&lt;/code&gt; &lt;strong&gt;except&lt;/strong&gt; within URLs&lt;/em&gt;. But no! She is in this universe, so she follows the Counselor’s suggestion and just excludes &lt;code class=&quot;highlighter-rouge&quot;&gt;/javascript&lt;/code&gt; for now.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: I think it’s a valid strategy to say we make the regex very broad and then exempt only &lt;code class=&quot;highlighter-rouge&quot;&gt;/javascript&lt;/code&gt; cases for now. This mostly errors on the side of fixing things. There’s some risk that somebody will have another legitimate use of wrongly-cased javascript someday like &lt;code class=&quot;highlighter-rouge&quot;&gt;http://learn-javascript.com&lt;/code&gt;, but we can deal with that reactively.&lt;/p&gt;

&lt;p&gt;The Developer goes to RegExr to learn how to do the exclusion she wants to do. She does a LOT of iterations while looking at the “Cheatsheet” in the lefthand sidebar of RegExr, and comes up with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[^\/-]([jJ]avascript)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Which catches the bit of that HTML page she wants - &lt;code class=&quot;highlighter-rouge&quot;&gt;zulip-js&quot;&amp;gt;Javascript&lt;/code&gt; - but none of:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[[1]](http://stackoverflow.com/questions/500504/javascript-for-in-with-arrays),
[[2]](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#for-in_loop),
http://my-javascript-guide.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;(she just came up with that last one because the preceding hyphen strikes her as a plausible potential case)&lt;/p&gt;

&lt;p&gt;The Developer is now going to figure out how to get this check into the HTML rule(s) as well. Maybe there’s some way to abstract things, so it’s defined in one place and run both by the HTML checker and the MD checker.&lt;/p&gt;

&lt;p&gt;The structure of the linter seems to be that developers set up rules/rulesets, and then reuse them elsewhere. The Developer decides to define this rule within the ruleset of &lt;em&gt;capitalization of proper nouns in prose rules&lt;/em&gt;. She sets up a new ruleset, just before the current definition of &lt;code class=&quot;highlighter-rouge&quot;&gt;html_rules&lt;/code&gt;, and simply copies the formatting of the other rules.&lt;/p&gt;

&lt;p&gt;To make sure she is right about how this structure works, she made a change and commits it. This will run the linter, to see whether it breaks. She saves the file and runs &lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt; in the terminal:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+    prose_style_rules = [
+        {'pattern': '[^\/-]([jJ]avascript)',
+         'description': &quot;javascript should be spelled JavaScript&quot;},
+    ] # type: RuleList
     html_rules = whitespace_rules + [
         {'pattern': 'placeholder=&quot;[^{]',
          'description': &quot;`placeholder` value should be translatable.&quot;},
@@ -327,11 +331,7 @@ def build_custom_checkers(by_lang):
          'description': &quot;`placeholder` value should be translatable.&quot;},
         ] # type: RuleList
     json_rules = [] # type: RuleList # just fix newlines at ends of files
-    markdown_rules = markdown_whitespace_rules + [
-        {'pattern': ' [jJ]avascript',
-         'exclude': set(['README.dev.md']), # temporary exclusion to avoid merg
-         'description': &quot;javascript should be spelled JavaScript&quot;},
-    ] # type: RuleList
+    markdown_rules = markdown_whitespace_rules + prose_style_rules
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The Developer decides to test one thing at a time - - change the rule &lt;em&gt;or&lt;/em&gt; the structure of the rule-calling. She goes for the rule-calling structure and changes the pattern for &lt;code class=&quot;highlighter-rouge&quot;&gt;prose_style_rules&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;'pattern': '[jJ]avascript',&lt;/code&gt;. Saves. Runs:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./tools/lint-all
javascript should be spelled JavaScript at docs/code-style.md line 140:
[[1]](http://stackoverflow.com/questions/500504/javascript-for-in-with-arrays),

javascript should be spelled JavaScript at docs/code-style.md line 141:
[[2]](http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml#for-in_loop),
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;At first surprised, she quickly realizes she took out the space from the pattern - she adds the space in and runs again - it works!&lt;/p&gt;

&lt;p&gt;The Developer is now going to try changing the regex. She changes it to &lt;code class=&quot;highlighter-rouge&quot;&gt;'pattern': '[^\/-]([jJ]avascript)'&lt;/code&gt; and runs the linter, which seems to work.&lt;/p&gt;

&lt;p&gt;Next she’s going to try &lt;code class=&quot;highlighter-rouge&quot;&gt;test-all&lt;/code&gt; which is more formidable and which she probably should have run earlier in this set of iterative changes.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Developer checks email and Zulip traffic, while waiting for the tests to finish&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: Although not related to your fix, take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;json_rules&lt;/code&gt; in your diff. :)&lt;/p&gt;

&lt;p&gt;While she’s waiting for that to run - tests seem to be passing - she wants to see what she would do to add… FAILED. The failing tests are Casper timeouts that some other developers are also getting, as they have mentioned reporting on their adventures. The Developer decides to ignore them.&lt;/p&gt;

&lt;p&gt;She does a fresh diff and notices &lt;code class=&quot;highlighter-rouge&quot;&gt;json_rules&lt;/code&gt; is completely empty, which may require further investigation in the future, to see whether it’s worth blowing away or filling.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: For the json thing, my two cents is that we should blow it away now. It’s clearly empty and just clutter at this point, and it wouldn’t be hard to restore the json section in the event that we come up with new json rules in the future.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Developer notes that and focuses on the regex for the time being.&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;acts6---the-battle-of-debugging&quot;&gt;Acts[6] - The Battle of Debugging&lt;/h3&gt;

&lt;p&gt;The Developer’s current hypothesis is that the new regex works, and the new placement works, and the next step is to get the HTML checker to use it.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;html_rules = whitespace_rules + prose_style_rules + [
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But wait! There are some failures! Some of these seem to imply a need to fix prose, some imply a need to fix the rule.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./tools/lint-all
javascript should be spelled JavaScript at templates/zerver/api.html line 8:
    &amp;lt;p&amp;gt;We have a &amp;lt;a href=&quot;/api/endpoints&quot;&amp;gt;well-documented API&amp;lt;/a&amp;gt; that allows you to build custom integrations, in addition to our &amp;lt;a href=&quot;/integrations&quot;&amp;gt;existing integrations&amp;lt;/a&amp;gt;. For ease-of-use, we've created a Python module that you can drop in to a project to start interacting with our API. There is also a &amp;lt;a href=&quot;https://github.com/zulip/zulip-js&quot;&amp;gt;Javascript library&amp;lt;/a&amp;gt; that can be used either in the browser or in Node.js.&amp;lt;/p&amp;gt;

javascript should be spelled JavaScript at templates/zerver/api.html line 29:
    &amp;lt;h4&amp;gt;Javascript&amp;lt;/h4&amp;gt;

javascript should be spelled JavaScript at templates/zerver/api.html line 39:
      &amp;lt;li&amp;gt;&amp;lt;a href=&quot;#javascript&quot; data-toggle=&quot;tab&quot;&amp;gt;Javascript&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;

javascript should be spelled JavaScript at templates/zerver/api.html line 136:
&amp;lt;div class=&quot;tab-pane&quot; id=&quot;javascript&quot;&amp;gt;

javascript should be spelled JavaScript at templates/zerver/index.html line 54:
    &amp;lt;p&amp;gt;{ trans }If this message does not go away, please wait a couple seconds and &amp;lt;a href=&quot;javascript:location.reload(true)&quot;&amp;gt;reload&amp;lt;/a&amp;gt; the page.{ endtrans }&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are five incongruities:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Is the one the Developer wanted to find, yay!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is similar to 1&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The hash should be excluded, but there is also some English to fix&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is to be excluded (id in an HTML tag)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Is to be excluded (href in an HTML tag)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: Nice work!&lt;/p&gt;

&lt;p&gt;She fixes the English bits and starts to wonder how to include a hash. She believes it needs special escaping, because she tried just including it using &lt;code class=&quot;highlighter-rouge&quot;&gt;'[^\/-#]([jJ]avascript)'&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;'[^\/-\#]([jJ]avascript)'&lt;/code&gt; - running &lt;code class=&quot;highlighter-rouge&quot;&gt;lint-all&lt;/code&gt; gave a lot of failures. She turns to RegExr, using her new knowledge gained from the five linter failures.&lt;/p&gt;

&lt;p&gt;She finds some help in the “Community” examples - looking for the word hash it turns out that &lt;code class=&quot;highlighter-rouge&quot;&gt;\#&lt;/code&gt; does indeed search for a hash. She tries to copy and paste the regex from her editor to RegExr, which responds with some errors about the ordering. She then switches the order to put the hash before the hyphen:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[^\/\#-]([jJ]avascript)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And now it matches what she wants it to match! Also, it catches the quotation marks which she thought she’d have to manually check for.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: haha, do you know what it’s doing there? [&lt;em&gt;meaning the ordering error&lt;/em&gt;]&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Developer notes that she has a guess about it - something about a range of characters in ASCII - but she is going to try running it to see whether now it catches anything she doesn’t want it to&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./tools/lint-all
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hmm. Wait. She realizes she does &lt;strong&gt;not&lt;/strong&gt; want to catch the quotation marks. She adds &lt;code class=&quot;highlighter-rouge&quot;&gt;\&quot;&lt;/code&gt; to that set.&lt;/p&gt;

&lt;p&gt;Adding it to the end causes &lt;code class=&quot;highlighter-rouge&quot;&gt;lint-all&lt;/code&gt; to go back into &lt;em&gt;everything is failing&lt;/em&gt; mode.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: This is a good case to step back. You got a cryptic red flag on the hyphen, and you made a change that you don’t completely understand, although it sounds like you have a hypothesis. What function does “-“ serve in regexes?&lt;/p&gt;

&lt;p&gt;The Developer thinks out loud:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; gives you a range&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;so if it’s at the start of a sequence….&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;or rather, in the middle….&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;it’ll cause the regex to think “you mean everything between [char to the left] and [char to the right]”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: you probably want to escape that dash for future readability &lt;em&gt;alone&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And it turns out that is not the only reason! The Developer is now escaping it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'pattern': '[^\/\#\-\&quot;]([jJ]avascript)'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And, since she’s fixed the prose problems, &lt;code class=&quot;highlighter-rouge&quot;&gt;lint-all&lt;/code&gt; gives her zero results. Yay!&lt;/p&gt;

&lt;h3 id=&quot;acts7---creating-a-pull-request&quot;&gt;Acts[7] - Creating a Pull Request&lt;/h3&gt;

&lt;p&gt;It’s time for the Developer to add a code comment explaining the cryptic regex:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'pattern':&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'[^\/\#\-\&quot;]([jJ]avascript)',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;hrefs/divs&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;She wants to have a fine-grained control over what she’s adding in this commit, so she types outside of Vagrant (unsure if she should maybe do it in Vagrant):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git add -p
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: You should always do git stuff outside of Vagrant, unless you just enjoy pain. :)&lt;/p&gt;

&lt;p&gt;She reviews all the changes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;she made prose fixes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;she changed the rule for finding the incorrect spellings of &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; and moved it to a new ruleset&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;she removed the temporary &lt;code class=&quot;highlighter-rouge&quot;&gt;README.dev.md&lt;/code&gt; exclusion, since that file doesn’t exist anymore&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Developer makes the judgment call that all this is one logical change and decides to put it in one commit.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit
Running lint-all using vagrant...
[sudo] password for sumanah:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Which pops up her editor to write a commit message. The Backstage Voice’s commit message from July was &lt;code class=&quot;highlighter-rouge&quot;&gt;lint: Add documentation lint check for JavaScript spelling.&lt;/code&gt; - she can’t go wrong by copying its format.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: This is a pretty borderline call, but I’ll make the argument that you should actually split the commit–doc changes and lint changes.&lt;/p&gt;

&lt;p&gt;The Developer argues that The Backstage Voice did a similar fix all in one go (prose + linter), so she’s ok with doing the same right now.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: If there was some subtle bug in the regex (not likely at this point, but just suppose the possibility), then it would be nice to roll back the lint changes without regressing the docs. But one commit is realistically fine here.&lt;/p&gt;

&lt;p&gt;The Developer agrees she’s not not necessarily following the absolute most pristine best practices here.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: There are occasions where we need to combine the commits because without the lint change, the code fixups will actually break. But sometimes we’re just lazy, too, haha. :)&lt;/p&gt;

&lt;p&gt;The Developer made a commit and is now making the change to remove the empty JSON ruleset, to add in a different commit. She thought she could just snip out that one line, but then when she tried to commit, the linter complained, because guess what, the linter actually calls &lt;code class=&quot;highlighter-rouge&quot;&gt;json_rules&lt;/code&gt; elsewhere!&lt;/p&gt;

&lt;p&gt;When she looks for &lt;code class=&quot;highlighter-rouge&quot;&gt;json&lt;/code&gt; in this file she sees a lot of things she is not going to change during this adventure. She is going to file an issue for someone else to look at it. She gets back to the state she wanted to be in, where she has not touched the JSON-related code.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git reset HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It is now the time for a pull request with a single commit.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git status
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It shows a lot of untracked files, but the Developer knows that the modifications she wants to push are in the tracked ones.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push origin JavaScript-linter
Counting objects: 54, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (7/7), done.
Writing objects: 100% (7/7), 944 bytes | 0 bytes/s, done.
Total 7 (delta 6), reused 0 (delta 0)
remote: Resolving deltas: 100% (6/6), completed with 6 local objects.
To git@github.com:brainwane/zulip.git
 * [new branch]      JavaScript-linter -&amp;gt; JavaScript-linter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;She opens a new tab in her browser and GitHub agrees she has just pushed a new branch. She wants to start her pull request, but suddenly realizes she forgot to mention in her commit message why she was removing that exclusion for the nonexistent page.&lt;/p&gt;

&lt;p&gt;The Developer goes back to fix it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git commit --amend
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After updating the commit message she runs:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git push -f origin JavaScript-linter
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and reloads GitHub. Control-R on the pull request doesn’t quite work - the new commit message shows up as the page is loading, but when it finishes loading, it has the old one. Cache issue? She goes to the &lt;code class=&quot;highlighter-rouge&quot;&gt;zulip/zulip&lt;/code&gt; GitHub repo and then to &lt;code class=&quot;highlighter-rouge&quot;&gt;brainwane/zulip&lt;/code&gt; and she tries clicking “Pull requests” and manually constructing one from her branch, and now the &lt;a href=&quot;https://github.com/zulip/zulip/pull/2029&quot;&gt;pull request&lt;/a&gt; is there.&lt;/p&gt;

&lt;p&gt;The Developer waits for Travis CI to decide if it’s going to complain when running the test suite.&lt;/p&gt;

&lt;h3 id=&quot;acts8---aftermath&quot;&gt;Acts[8] - Aftermath&lt;/h3&gt;

&lt;p&gt;The Developer is surprised how much time it took her to fix the linter issue.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: Even seemingly small changes like this can be time-consuming when you’re thorough. :) The good news is that the fix is broader than the original problem–we’re looking not just for markdown, but also HTML, and we removed some obsolete temporary shim code. Also, the new code is cleaner is terms of separating out the rules. (Also, regexes are always tricky and time-consuming.)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Travis CI concludes the Developer’s code failed the tests.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: @The Backstage Voice the pull request seems to be breaking due to a provisioning thing unrelated to the Developer’s fix.&lt;/p&gt;

&lt;p&gt;The Developer remembers to create an issue for the &lt;code class=&quot;highlighter-rouge&quot;&gt;json_rule&lt;/code&gt;. She runs &lt;code class=&quot;highlighter-rouge&quot;&gt;git blame&lt;/code&gt; to see who added the &lt;code class=&quot;highlighter-rouge&quot;&gt;json_rule&lt;/code&gt; and sees it was last touched by The Counselor in 3c401571. She runs &lt;code class=&quot;highlighter-rouge&quot;&gt;git show 3c401571&lt;/code&gt; and sees it was a refactor.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: Yep, my change was just moving code around. I’m about to investigate where the rules were actually emptied out.&lt;/p&gt;

&lt;p&gt;The Developer has filed &lt;a href=&quot;https://github.com/zulip/zulip/issues/2030&quot;&gt;an issue&lt;/a&gt; and asks the Counselor to teach her more about the investigative skill he intends to use. She is particularly interested in the specifics of how to find deleted code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: First, I want to get the latest copy of master, so I do this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  $ git checkout master
  $ git fetch upstream
  $ git rebase upstream/master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: I then do &lt;code class=&quot;highlighter-rouge&quot;&gt;git log -S json_rules&lt;/code&gt; to find changes that might have touched &lt;code class=&quot;highlighter-rouge&quot;&gt;json_rules&lt;/code&gt;, and I find this change: &lt;code class=&quot;highlighter-rouge&quot;&gt;e71d8bb4b6b1e90f4b6c0fb9ab93cd9929c9d87e&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git show e71d8bb4b6b1e90f4b6c0fb9ab93cd9929c9d87e
commit e71d8bb4b6b1e90f4b6c0fb9ab93cd9929c9d87e
Author: Tim Abbott &amp;lt;tabbott@mit.edu&amp;gt;
Date:   Thu Apr 14 10:48:30 2016 -0700

    lint-all: Require newlines at end of JSON files.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: So, this is a bit messy, but it turns out that when you call &lt;code class=&quot;highlighter-rouge&quot;&gt;custom_check_file&lt;/code&gt; on a file, even if the &lt;code class=&quot;highlighter-rouge&quot;&gt;rules&lt;/code&gt; parameter is an empty list, it still does a check for trailing newlines. So the current code’s behavior is correct, although there might be a way to refactor the code to improve clarity. Checking for whitespace issues is decidedly non-custom, so the name of the function is misleading to the extent that it does non-custom checks.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: It’s a little bit of a performance hack that we try to sweep a file all in one pass, both for custom regex things and generic things. If we separated out those concerns, which would be cleaner for somebody reading the code, then we’d introduce a small performance penalty in that we’d have to open every file twice.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: We could go down a huge rabbit hole trying to clean this up, but I think for now the simple fix is to clarify the comment. Something like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# It is okay that json_rules is empty, because we will
# still check JSON files for whitespace
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: The current comment is &lt;code class=&quot;highlighter-rouge&quot;&gt;# just fix newlines at ends of files&lt;/code&gt;, which sort of implies that, but I think we can be more explicit.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: It might be worth making that quick fix, so that as a side effect, your re-push will kick off a new Travis build. I’m curious if the Travis errors you got are permanent or just a one-time flakiness thing.&lt;/p&gt;

&lt;p&gt;The Developer makes the quick fix for the newly filed issue in a new commit and re-pushes her code.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Counselor&lt;/em&gt;: Indeed! Incidentally, your build passed, so I think the prior failure was just some sort of flakiness in the Travis infrastructure.&lt;/p&gt;

&lt;p&gt;Phew!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Backstage Voice&lt;/em&gt;: Yeah, if you ever see an error about being unable to download a URL on the public internet, that’s almost certainly caused by internal networking infrastructure problems with Travis CI.&lt;/p&gt;

&lt;p&gt;The Developer wonders if it’s a durable enough prediction that it should go in our testing docs?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The Backstage Voice&lt;/em&gt;: I think it might be better to add some retry logic around the network-intensive parts of our testing system (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt; commands). It’s probably about as much work as writing good docs for this, and has the advantage that it might actually solve the problem.&lt;/p&gt;

&lt;p&gt;The Developer files &lt;a href=&quot;https://github.com/zulip/zulip/issues/2034&quot;&gt;another issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;THE END&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The developer’s journey requires a methodic and mindful approach. They have to first understand the problem and identify the probable causes. They should not be afraid of making mistakes and testing hypotheses.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reading the documentation while looking for answers to specific questions seems to work well while trying to solve a problem. Initial familiarity with the documentation helps with finding the relevant documents.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Asking for help after trying and looking is the logical next step. There is no point in getting lost in a jungle of bugs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Good understanding of what’s exactly happening in code is crucial. Sometimes developers look over small discrepancies, but they may become causes of bigger problems.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Even seemingly small changes can be time-consuming when one is thorough. While solving one problem a developer may encounter many other problems on many levels.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It is often wise for a developer to be cautious about believing they know the truth. When approaching a problem it is important to have some history of the project that gives a sense of how risky the change is. It is also helpful to approach it with the scientific method and creating hypotheses about what could fail if they make a change.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Coding is an adventure. It’s demanding, requires a lot of patience and perseverance, but it’s a most rewarding endeavor.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>alicja</name></author><summary>Recently I’ve had the pleasure of seeing Sumana Harihareswara live documenting a coding adventure on Zulip. As I wanted to learn even more from this experience, I’ve reread it and tried to break it into high level activities.</summary></entry><entry><title>RC - day 65</title><link href="https://trueskawka.github.io/usa/rc/log/2016/10/20/RC-day-65.html" rel="alternate" type="text/html" title="RC - day 65" /><published>2016-10-20T07:30:31-04:00</published><updated>2016-10-20T07:30:31-04:00</updated><id>https://trueskawka.github.io/usa/rc/log/2016/10/20/RC-day-65</id><content type="html" xml:base="https://trueskawka.github.io/usa/rc/log/2016/10/20/RC-day-65.html">&lt;p&gt;Achievements:&lt;/p&gt;

&lt;p&gt;*&lt;/p&gt;

&lt;p&gt;V	              A brief, incomplete, and mostly wrong history of disco
positive, gay; saturday night fever; having fun?&lt;/p&gt;

&lt;p&gt;Lushi Li	      Kungfu and You
an umbrella term for chinese martial arts
deliberate practice expert skills over a long period of time
Doctrine of the Mean
in martial arts the punch is like hello world&lt;/p&gt;

&lt;p&gt;Brian Lee	      Fractional Changes
quickly doing approximations, understanding
Newton’s approximation of square root&lt;/p&gt;

&lt;p&gt;Mike Heaton	    Oh Shit Brexit
comedy break&lt;/p&gt;

&lt;p&gt;Andrea Heyman	  Knot theory
Reidemeister moves&lt;/p&gt;

&lt;p&gt;Satabdi	        Why I love open
Arjuna&lt;/p&gt;

&lt;p&gt;Sofia-Jeanne	  Cognitive Psychology / MBTI
a path for decision-making
more introverted and intuitive
RC as Refuge
common mindsets&lt;/p&gt;

&lt;p&gt;Harold Treen	  Non-violent communication
needs and inspire to help
when observation, i feel feelings, because i need (positive way), requests (concrete and doable)
talking to yourself
appreciate others&lt;/p&gt;

&lt;p&gt;Alicja	        Preference, indifference, incomparability - consolidated systems of preference relations&lt;/p&gt;

&lt;p&gt;Andy Lee	      Nerding out on judo
I’m more nerdy about it than good
not fighting - playing like tennis
throw people&lt;/p&gt;

&lt;p&gt;Andrew Yoon	    Counterpoint and the 40 Voice Motet
counterpoint
add up to have something that’s more than just sum of parts
spem in alium nunqam habuqi Tallis&lt;/p&gt;

&lt;p&gt;Jeni Gooley	    NormCore&lt;/p&gt;

&lt;p&gt;Julia Yu	      Fundamental ideas
fundamental ideas are ideas that keep getting discovered
analogies between fields
tinyurl.com/fundamentalideas&lt;/p&gt;

&lt;p&gt;Rodrigo Guzman	Put time on your side
we can not solve our problems with the same level of thinking that created them
cognitive load sucks, but to-do list don’t work
discipline is doing the things you want to want to do&lt;/p&gt;</content><author><name>alicja</name></author><summary>Achievements:</summary></entry><entry><title>RC - day 64</title><link href="https://trueskawka.github.io/usa/rc/log/2016/10/20/RC-day-64.html" rel="alternate" type="text/html" title="RC - day 64" /><published>2016-10-20T07:12:31-04:00</published><updated>2016-10-20T07:12:31-04:00</updated><id>https://trueskawka.github.io/usa/rc/log/2016/10/20/RC-day-64</id><content type="html" xml:base="https://trueskawka.github.io/usa/rc/log/2016/10/20/RC-day-64.html">&lt;p&gt;Achievements:&lt;/p&gt;

&lt;p&gt;*&lt;/p&gt;

&lt;p&gt;inspirational quotes&lt;/p&gt;</content><author><name>alicja</name></author><summary>Achievements:</summary></entry><entry><title>RC - day 63</title><link href="https://trueskawka.github.io/usa/rc/log/2016/10/17/RC-day-63.html" rel="alternate" type="text/html" title="RC - day 63" /><published>2016-10-17T06:42:31-04:00</published><updated>2016-10-17T06:42:31-04:00</updated><id>https://trueskawka.github.io/usa/rc/log/2016/10/17/RC-day-63</id><content type="html" xml:base="https://trueskawka.github.io/usa/rc/log/2016/10/17/RC-day-63.html">&lt;p&gt;Achievements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;my pull request for Zulip was merged&lt;/li&gt;
  &lt;li&gt;finished writing initial Outreachy proposal for Zulip&lt;/li&gt;
  &lt;li&gt;refactored my workflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My pull request for Zulip stream filtering in subscriptions page was merged today!&lt;/p&gt;

&lt;p&gt;It was the last weekend before Outreachy application deadline and I’ve managed to finish my &lt;a href=&quot;https://paper.dropbox.com/doc/Outreachy-proposal-QfwrTnnGBDBd9hBGCyUjT#:h2=Outreachy-proposal&quot;&gt;initial proposal&lt;/a&gt; and submit the application on time. I think it will change a lot over the next three weeks, since I seem to have a lot of ideas and awareness of various needs, but need to construct smarter and more tangible goals for introducing new features.&lt;/p&gt;

&lt;p&gt;With some alone time on my hands, I’ve tweaked and refactored my workflow, after reading:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rodrigo’s post on &lt;a href=&quot;https://rz.github.io/articles/2016/oct/time-on-your-side.html&quot;&gt;having time on your side&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;an old FreeCodeCamp article on &lt;a href=&quot;https://medium.freecodecamp.com/finding-time-to-become-a-better-developer-eebc154881b2#.qvb564jid&quot;&gt;finding time to become a better developer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Furthermore I’ve found a lot of inspiration while reading Dan’s list of &lt;a href=&quot;http://danluu.com/programming-books/&quot;&gt;programming books you might consider reading&lt;/a&gt;, or, as I would call it, &lt;em&gt;a list of programming books you might be so inclined as to potentially try to find a little bit, but not too much, time for, if and, only if, you are so inclined to do&lt;/em&gt;.&lt;/p&gt;</content><author><name>alicja</name></author><summary>Achievements:</summary></entry><entry><title>RC - day 62</title><link href="https://trueskawka.github.io/usa/rc/log/2016/10/17/RC-day-62.html" rel="alternate" type="text/html" title="RC - day 62" /><published>2016-10-17T06:37:31-04:00</published><updated>2016-10-17T06:37:31-04:00</updated><id>https://trueskawka.github.io/usa/rc/log/2016/10/17/RC-day-62</id><content type="html" xml:base="https://trueskawka.github.io/usa/rc/log/2016/10/17/RC-day-62.html">&lt;p&gt;Achievements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;improved testing for the Zulip feature&lt;/li&gt;
  &lt;li&gt;implemented suggested changes from the pull request&lt;/li&gt;
  &lt;li&gt;learned better git flow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Today I was mostly focusing on improving my Zulip pull request for stream filtering, as to make sure it gets merged into the project on time. At some point my tests started failing with Travis CI and it took some time to realize the application was not acting identically as with manual testing - the expected state was not consistent between similar tests. Atomized tests with individual set-up solved the problem.&lt;/p&gt;

&lt;p&gt;I’ve also learned a lot about interactive rebasing and amending commits, as to properly manage my pull request. As usual, it couldn’t have been done without Cihan’s help and support.&lt;/p&gt;</content><author><name>alicja</name></author><summary>Achievements:</summary></entry><entry><title>RC - day 61</title><link href="https://trueskawka.github.io/usa/rc/log/2016/10/16/RC-day-61.html" rel="alternate" type="text/html" title="RC - day 61" /><published>2016-10-16T06:25:31-04:00</published><updated>2016-10-16T06:25:31-04:00</updated><id>https://trueskawka.github.io/usa/rc/log/2016/10/16/RC-day-61</id><content type="html" xml:base="https://trueskawka.github.io/usa/rc/log/2016/10/16/RC-day-61.html">&lt;p&gt;Achievements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;algorithmic interview prep&lt;/li&gt;
  &lt;li&gt;one-on-one with James&lt;/li&gt;
  &lt;li&gt;improv games&lt;/li&gt;
  &lt;li&gt;solving an infinite matrix problem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After another all-nighter I should just start calling them ‘nights’, since I can’t seem to be able to fall asleep. Got to the apartment in the morning, slept a few hours, got back to RC and went to interview prep, which was loads of fun. I’ve asked Dan a fun brain-teaser questions I love to ask people and got one from Chris that was very satisfying.&lt;/p&gt;

&lt;p&gt;A one-on-one with James was very helpful, since with the open format of RC it’s sometimes challenging to keep your priorities and goals in mind. After a fruitful chat, I got a ton of positive energy from improv games with Sarah and a group of wonderful Recursers.&lt;/p&gt;

&lt;p&gt;Another night full of learning, talking and coding followed, with the brain-teaser on an infinite matrix taking a lot of Andy’s and my time. If you want to try it, here is the problem statement:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Imagine an infinite 2-dimensional matrix containing the
    numbers 1, 2, 3, ... arranged in a diagonally winding order
    as below. Write an algorithm that returns the matrix element
    at row i and column j.

    1    3    4    10   11   21   22   36   37   55
    2    5    9    12   20   23   35   38   54   57
    6    8    13   19   24   34   39   53   58   76
    7    14   18   25   33   40   52   59   75   82
    15   17   26   32   41   51   60   74   83  101
    16   27   31   42   50   61   73   84  100  111
    28   30   43   49   62   72   85   99  112  130
    29   44   48   63   71   86   98  113  129  144
    45   47   64   70   87   97  114  128  145  163
    46   65   69   88   96  115  127  146  162  181
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And if you’d like to check out solutions - here’s &lt;a href=&quot;https://gist.github.com/aglee/65fa7f29bd6cccf4d4fdf2462a7c1f07&quot;&gt;Andy’s one-liner in Swift&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/trueskawka/cc22b1fa5311ff56da8c7bba41888843&quot;&gt;my solution in Python&lt;/a&gt;.&lt;/p&gt;</content><author><name>alicja</name></author><summary>Achievements:</summary></entry><entry><title>RC - day 60</title><link href="https://trueskawka.github.io/usa/rc/log/2016/10/16/RC-day-60.html" rel="alternate" type="text/html" title="RC - day 60" /><published>2016-10-16T06:11:31-04:00</published><updated>2016-10-16T06:11:31-04:00</updated><id>https://trueskawka.github.io/usa/rc/log/2016/10/16/RC-day-60</id><content type="html" xml:base="https://trueskawka.github.io/usa/rc/log/2016/10/16/RC-day-60.html">&lt;p&gt;Achievements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;watched community presentations&lt;/li&gt;
  &lt;li&gt;went for the Etsy &lt;em&gt;Code as Craft&lt;/em&gt; meet-up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As much fun as all-nighters are, they make it very challenging to be productive on presentation days. After getting some sleep at the apartment, I got to RC at 3:15pm, which was in perfect sync with snacks before presentations.&lt;/p&gt;

&lt;p&gt;Some of the highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Marko had a great presentation about inducing hallucinations in neural networks, mainly &lt;a href=&quot;https://github.com/markostam/audio-deepdream-tf&quot;&gt;deep dreaming on audio spectrograms&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Andrea presented his &lt;a href=&quot;https://github.com/AndreaOrru/LaiNES&quot;&gt;NES emulator&lt;/a&gt; and reminded me of &lt;a href=&quot;https://www.wikiwand.com/en/Kirby%27s_Dream_Land&quot;&gt;Kirby&lt;/a&gt; - one of my favourite childhood games for Game Boy&lt;/li&gt;
  &lt;li&gt;Tara talked about &lt;a href=&quot;https://github.com/taravancil/talks/blob/master/serverless-lightning.org&quot;&gt;serverless architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After presentations we went for a meet-up at Etsy, which was about mingling, great food and more presentations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Leah presented the &lt;a href=&quot;http://blog.leahhanson.us/post/recursecenter2016/haiku_icons.html&quot;&gt;Haiku OS Vector Icon Format&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Keyur talked about the data structures transformations at Etsy&lt;/li&gt;
  &lt;li&gt;Emily unveiled her personal journey to creative coding, approached with a tinkering mindset&lt;/li&gt;
  &lt;li&gt;Stefanie focused on &lt;a href=&quot;https://codeascraft.com/2016/09/06/api-first-transformation-at-etsy-concurrency/&quot;&gt;API-first infrastructure at Etsy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One of the best things about the night was a photo booth, which we used extensively for group photos. I hope to get some more of them posted soon, for now you may enjoy a few shots of Michelle and me.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;click an image to see the gallery&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;

&lt;div class=&quot;thumb-container&quot;&gt;
  &lt;a href=&quot;https://dl.dropboxusercontent.com/u/56085440/photos/bonding/etsy/etsy_main_1.jpg&quot; data-lightbox=&quot;bonding/etsy&quot; data-title=&quot;When I find a camera, crazy things happen&quot;&gt;
    &lt;img src=&quot;https://dl.dropboxusercontent.com/u/56085440/photos/bonding/etsy/etsy_thumb_1.jpg&quot; class=&quot;thumb-img&quot; alt=&quot;etsy_main_1.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;div class=&quot;thumb-container&quot;&gt;
  &lt;a href=&quot;https://dl.dropboxusercontent.com/u/56085440/photos/bonding/etsy/etsy_main_2.jpg&quot; data-lightbox=&quot;bonding/etsy&quot; data-title=&quot;Bonding with Michelle&quot;&gt;
    &lt;img src=&quot;https://dl.dropboxusercontent.com/u/56085440/photos/bonding/etsy/etsy_thumb_2.jpg&quot; class=&quot;thumb-img&quot; alt=&quot;etsy_main_2.jpg&quot; /&gt;
  &lt;/a&gt;
&lt;/div&gt;

&lt;/p&gt;</content><author><name>alicja</name></author><summary>Achievements:</summary></entry><entry><title>RC - day 59</title><link href="https://trueskawka.github.io/usa/rc/log/2016/10/13/RC-day-59.html" rel="alternate" type="text/html" title="RC - day 59" /><published>2016-10-13T04:34:31-04:00</published><updated>2016-10-13T04:34:31-04:00</updated><id>https://trueskawka.github.io/usa/rc/log/2016/10/13/RC-day-59</id><content type="html" xml:base="https://trueskawka.github.io/usa/rc/log/2016/10/13/RC-day-59.html">&lt;p&gt;Achievements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;deciding on next Zulip contributions&lt;/li&gt;
  &lt;li&gt;drafting the application for Outreachy at Zulip&lt;/li&gt;
  &lt;li&gt;drafting a presentation for non-technical talks&lt;/li&gt;
  &lt;li&gt;signed-up for algorithm prep&lt;/li&gt;
  &lt;li&gt;revamped my resume&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After having some much needed rest, I’ve focused on planning and drafting my application for Outreachy. I’ve also created a short presentation on consolidated systems of preference relations for Tuesday’s non-technical talks, which may sound intimidating, but I hope to present it in a light and fun way.&lt;/p&gt;

&lt;p&gt;Other than that, I’ve been working on my resume and expectations for next week’s job fairs. Since Outreachy deadline for applications is the upcoming Monday, I might just restrain from any other work. Especially since so much is happening at RC in the upcoming days - a meet-up at Etsy, interview prep, jobs profile building workshop, blog club, improv night and a &lt;a href=&quot;https://www.wikiwand.com/en/Contra_dance&quot;&gt;contra dance&lt;/a&gt; evening.&lt;/p&gt;</content><author><name>alicja</name></author><summary>Achievements:</summary></entry><entry><title>RC - day 58</title><link href="https://trueskawka.github.io/usa/rc/log/2016/10/12/RC-day-58.html" rel="alternate" type="text/html" title="RC - day 58" /><published>2016-10-12T19:01:31-04:00</published><updated>2016-10-12T19:01:31-04:00</updated><id>https://trueskawka.github.io/usa/rc/log/2016/10/12/RC-day-58</id><content type="html" xml:base="https://trueskawka.github.io/usa/rc/log/2016/10/12/RC-day-58.html">&lt;p&gt;Achievements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;submitted my pull request to Zulip&lt;/li&gt;
  &lt;li&gt;had two different American diner experiences&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We left RC at 10am today, after all night of coding and learning. I think my internal clock is completely broken by now and so is my ability to fall asleep in an instant, I’ve never cherished enough over the years. Instead of getting some much needed rest, I’ve tried and failed to watch the presidential debate and spent most of the first half of day napping between periods of reading random stuff on the Internet (some of which may be potentially useful in the future).&lt;/p&gt;

&lt;p&gt;The last two days blurred into one long nap-counterpointed misc of programming and learning, with barely any socializing. Instead of going to RC in the afternoon, I met up with Cihan in a diner in Astoria. He pushed me into finishing my PR as-is, without worrying too much about it being perfect. Better early and flawed than perfect and late.&lt;/p&gt;

&lt;p&gt;Of course, I didn’t listen to him enough and was so paranoid about all tests passing all the time, I might’ve discovered a minor bug in the test suite, that made my local version of Zulip not pass the tests randomly. It turned out to be an issue unrelated to any of my changes and I’ve spend a few hours trying to figure it out and communicate the problem to Zulip team, which was a good learning experience.&lt;/p&gt;

&lt;p&gt;Finally, I’ve submitted &lt;a href=&quot;https://github.com/zulip/zulip/pull/1983&quot;&gt;my PR&lt;/a&gt; around 4am, after checking and re-checking the code and accompanying messages for about three hours. I hope the more confident I get with open source, the less time I’ll spend on being terrified of wasting others’ time and more focused on the code quality, but I think the next few contributions are going to still be stressful.&lt;/p&gt;

&lt;p&gt;In the past 24 hours I’ve tried two different American diners - one very stylish (priced accordingly) and one very American-movieish. Both were fun and I felt a bit like a movie-star (or at least a supporting character/innocent bystander in Pulp Fiction). Also, milkshakes. A girl needs to have more of those on bad days (which will be evened out in my diet by less and less bad days over time due to more milkshakes).&lt;/p&gt;</content><author><name>alicja</name></author><summary>Achievements:</summary></entry><entry><title>RC - day 57</title><link href="https://trueskawka.github.io/usa/rc/log/2016/10/12/RC-day-57.html" rel="alternate" type="text/html" title="RC - day 57" /><published>2016-10-12T17:31:31-04:00</published><updated>2016-10-12T17:31:31-04:00</updated><id>https://trueskawka.github.io/usa/rc/log/2016/10/12/RC-day-57</id><content type="html" xml:base="https://trueskawka.github.io/usa/rc/log/2016/10/12/RC-day-57.html">&lt;p&gt;Achievements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;snapped out of an impostor syndrome episode&lt;/li&gt;
  &lt;li&gt;learned a lot about the codebase of Zulip&lt;/li&gt;
  &lt;li&gt;learned even more about the development process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It was very hard to start working on my Outreachy application on Tuesday. The process of learning how Zulip works, where my PR fits in the codebase and how am I to contribute something meaningful to a big project a lot of people use, was time-consuming and a bit intimidating. At some point I felt I’m not going to achieve much and should just stop pretending, giving a way in for other, more focused, talented and generally smarter people.&lt;/p&gt;

&lt;p&gt;I’ve realised I have a severe case of the &lt;a href=&quot;https://www.wikiwand.com/en/Impostor_syndrome&quot;&gt;impostor syndrome&lt;/a&gt; and it was surprising for me. I got into RC - the programming Neverland, where everything is possible and failing is learning. Where people are self-motivated and curate a growth environment, that’s welcoming and non-intimidating. Even so, I’ve managed to convince myself subconsciously I don’t belong here. That I’ve wasted so much time over the years (especially other people’s time) and all my potential and learning is going to waste.&lt;/p&gt;

&lt;p&gt;It’s much easier to talk and share things I feel confident about. My programming is going in the right direction, but it will take years for me to feel as confident as I am with my writing or business skills. And it might never even come to that, since the environment is constantly changing and the amount of learning required to stay on the top of my ability might be incomparable to most other settings.&lt;/p&gt;

&lt;p&gt;It takes a village to grow. I am lucky enough to have friends that care about me and know when I need a nudge in the right direction. Cihan was there again to intimidate me into working and we’ve work together all night. I didn’t finish the pull request, but I’ve learned a lot on the way and started feeling confident again.&lt;/p&gt;

&lt;p&gt;Now I think am at risk of being too much of a perfectionist, as ridiculous as it may sounds. I’m afraid of wasting someone’s time on a feature that’s not completely finished, so I’ll work on it more and try to push myself to share it by the end of the day on Wednesday.&lt;/p&gt;</content><author><name>alicja</name></author><summary>Achievements:</summary></entry></feed>
